#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Agency.PaidTimeOffDAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HRPaidTimeOff")]
	public partial class HRPaidTimeOffDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertENTUserAccount(ENTUserAccount instance);
    partial void UpdateENTUserAccount(ENTUserAccount instance);
    partial void DeleteENTUserAccount(ENTUserAccount instance);
    partial void InsertENTMenuItem(ENTMenuItem instance);
    partial void UpdateENTMenuItem(ENTMenuItem instance);
    partial void DeleteENTMenuItem(ENTMenuItem instance);
    partial void InsertENTRole(ENTRole instance);
    partial void UpdateENTRole(ENTRole instance);
    partial void DeleteENTRole(ENTRole instance);
    partial void InsertENTRoleCapability(ENTRoleCapability instance);
    partial void UpdateENTRoleCapability(ENTRoleCapability instance);
    partial void DeleteENTRoleCapability(ENTRoleCapability instance);
    partial void InsertENTRoleUserAccount(ENTRoleUserAccount instance);
    partial void UpdateENTRoleUserAccount(ENTRoleUserAccount instance);
    partial void DeleteENTRoleUserAccount(ENTRoleUserAccount instance);
    partial void InsertENTCapability(ENTCapability instance);
    partial void UpdateENTCapability(ENTCapability instance);
    partial void DeleteENTCapability(ENTCapability instance);
    partial void InsertENTWFOwnerGroupUserAccount(ENTWFOwnerGroupUserAccount instance);
    partial void UpdateENTWFOwnerGroupUserAccount(ENTWFOwnerGroupUserAccount instance);
    partial void DeleteENTWFOwnerGroupUserAccount(ENTWFOwnerGroupUserAccount instance);
    partial void InsertENTWFStateProperty(ENTWFStateProperty instance);
    partial void UpdateENTWFStateProperty(ENTWFStateProperty instance);
    partial void DeleteENTWFStateProperty(ENTWFStateProperty instance);
    partial void InsertENTWFItemOwner(ENTWFItemOwner instance);
    partial void UpdateENTWFItemOwner(ENTWFItemOwner instance);
    partial void DeleteENTWFItemOwner(ENTWFItemOwner instance);
    partial void InsertENTWFItemStateHistory(ENTWFItemStateHistory instance);
    partial void UpdateENTWFItemStateHistory(ENTWFItemStateHistory instance);
    partial void DeleteENTWFItemStateHistory(ENTWFItemStateHistory instance);
    partial void InsertHoliday(Holiday instance);
    partial void UpdateHoliday(Holiday instance);
    partial void DeleteHoliday(Holiday instance);
    partial void InsertPTODayType(PTODayType instance);
    partial void UpdatePTODayType(PTODayType instance);
    partial void DeletePTODayType(PTODayType instance);
    partial void InsertPTORequest(PTORequest instance);
    partial void UpdatePTORequest(PTORequest instance);
    partial void DeletePTORequest(PTORequest instance);
    partial void InsertPTORequestType(PTORequestType instance);
    partial void UpdatePTORequestType(PTORequestType instance);
    partial void DeletePTORequestType(PTORequestType instance);
    partial void InsertPTOVacationBank(PTOVacationBank instance);
    partial void UpdatePTOVacationBank(PTOVacationBank instance);
    partial void DeletePTOVacationBank(PTOVacationBank instance);
    partial void InsertENTWFOwnerGroup(ENTWFOwnerGroup instance);
    partial void UpdateENTWFOwnerGroup(ENTWFOwnerGroup instance);
    partial void DeleteENTWFOwnerGroup(ENTWFOwnerGroup instance);
    partial void InsertENTWFItem(ENTWFItem instance);
    partial void UpdateENTWFItem(ENTWFItem instance);
    partial void DeleteENTWFItem(ENTWFItem instance);
    partial void InsertENTWFState(ENTWFState instance);
    partial void UpdateENTWFState(ENTWFState instance);
    partial void DeleteENTWFState(ENTWFState instance);
    partial void InsertENTWFTransition(ENTWFTransition instance);
    partial void UpdateENTWFTransition(ENTWFTransition instance);
    partial void DeleteENTWFTransition(ENTWFTransition instance);
    partial void InsertENTEmail(ENTEmail instance);
    partial void UpdateENTEmail(ENTEmail instance);
    partial void DeleteENTEmail(ENTEmail instance);
    partial void InsertENTNotification(ENTNotification instance);
    partial void UpdateENTNotification(ENTNotification instance);
    partial void DeleteENTNotification(ENTNotification instance);
    partial void InsertENTNotificationENTUserAccount(ENTNotificationENTUserAccount instance);
    partial void UpdateENTNotificationENTUserAccount(ENTNotificationENTUserAccount instance);
    partial void DeleteENTNotificationENTUserAccount(ENTNotificationENTUserAccount instance);
    partial void InsertENTNotificationENTWFState(ENTNotificationENTWFState instance);
    partial void UpdateENTNotificationENTWFState(ENTNotificationENTWFState instance);
    partial void DeleteENTNotificationENTWFState(ENTNotificationENTWFState instance);
    partial void InsertENTWorkflow(ENTWorkflow instance);
    partial void UpdateENTWorkflow(ENTWorkflow instance);
    partial void DeleteENTWorkflow(ENTWorkflow instance);
    partial void InsertENTReport(ENTReport instance);
    partial void UpdateENTReport(ENTReport instance);
    partial void DeleteENTReport(ENTReport instance);
    partial void InsertENTAuditObjectProperty(ENTAuditObjectProperty instance);
    partial void UpdateENTAuditObjectProperty(ENTAuditObjectProperty instance);
    partial void DeleteENTAuditObjectProperty(ENTAuditObjectProperty instance);
    partial void InsertENTAudit(ENTAudit instance);
    partial void UpdateENTAudit(ENTAudit instance);
    partial void DeleteENTAudit(ENTAudit instance);
    partial void InsertENTAuditObject(ENTAuditObject instance);
    partial void UpdateENTAuditObject(ENTAuditObject instance);
    partial void DeleteENTAuditObject(ENTAuditObject instance);
    #endregion
		
		public HRPaidTimeOffDataContext() : 
				base(global::Agency.PaidTimeOffDAL.Properties.Settings.Default.HRPaidTimeOffConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HRPaidTimeOffDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HRPaidTimeOffDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HRPaidTimeOffDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HRPaidTimeOffDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ENTUserAccount> ENTUserAccounts
		{
			get
			{
				return this.GetTable<ENTUserAccount>();
			}
		}
		
		public System.Data.Linq.Table<ENTMenuItem> ENTMenuItems
		{
			get
			{
				return this.GetTable<ENTMenuItem>();
			}
		}
		
		public System.Data.Linq.Table<ENTRole> ENTRoles
		{
			get
			{
				return this.GetTable<ENTRole>();
			}
		}
		
		public System.Data.Linq.Table<ENTRoleCapability> ENTRoleCapabilities
		{
			get
			{
				return this.GetTable<ENTRoleCapability>();
			}
		}
		
		public System.Data.Linq.Table<ENTRoleUserAccount> ENTRoleUserAccounts
		{
			get
			{
				return this.GetTable<ENTRoleUserAccount>();
			}
		}
		
		public System.Data.Linq.Table<ENTCapability> ENTCapabilities
		{
			get
			{
				return this.GetTable<ENTCapability>();
			}
		}
		
		public System.Data.Linq.Table<ENTWFOwnerGroupUserAccount> ENTWFOwnerGroupUserAccounts
		{
			get
			{
				return this.GetTable<ENTWFOwnerGroupUserAccount>();
			}
		}
		
		public System.Data.Linq.Table<ENTWFStateProperty> ENTWFStateProperties
		{
			get
			{
				return this.GetTable<ENTWFStateProperty>();
			}
		}
		
		public System.Data.Linq.Table<ENTWFItemOwner> ENTWFItemOwners
		{
			get
			{
				return this.GetTable<ENTWFItemOwner>();
			}
		}
		
		public System.Data.Linq.Table<ENTWFItemStateHistory> ENTWFItemStateHistories
		{
			get
			{
				return this.GetTable<ENTWFItemStateHistory>();
			}
		}
		
		public System.Data.Linq.Table<Holiday> Holidays
		{
			get
			{
				return this.GetTable<Holiday>();
			}
		}
		
		public System.Data.Linq.Table<PTODayType> PTODayTypes
		{
			get
			{
				return this.GetTable<PTODayType>();
			}
		}
		
		public System.Data.Linq.Table<PTORequest> PTORequests
		{
			get
			{
				return this.GetTable<PTORequest>();
			}
		}
		
		public System.Data.Linq.Table<PTORequestType> PTORequestTypes
		{
			get
			{
				return this.GetTable<PTORequestType>();
			}
		}
		
		public System.Data.Linq.Table<PTOVacationBank> PTOVacationBanks
		{
			get
			{
				return this.GetTable<PTOVacationBank>();
			}
		}
		
		public System.Data.Linq.Table<ENTWFOwnerGroup> ENTWFOwnerGroups
		{
			get
			{
				return this.GetTable<ENTWFOwnerGroup>();
			}
		}
		
		public System.Data.Linq.Table<ENTWFItem> ENTWFItems
		{
			get
			{
				return this.GetTable<ENTWFItem>();
			}
		}
		
		public System.Data.Linq.Table<ENTWFState> ENTWFStates
		{
			get
			{
				return this.GetTable<ENTWFState>();
			}
		}
		
		public System.Data.Linq.Table<ENTWFTransition> ENTWFTransitions
		{
			get
			{
				return this.GetTable<ENTWFTransition>();
			}
		}
		
		public System.Data.Linq.Table<ENTEmail> ENTEmails
		{
			get
			{
				return this.GetTable<ENTEmail>();
			}
		}
		
		public System.Data.Linq.Table<ENTNotification> ENTNotifications
		{
			get
			{
				return this.GetTable<ENTNotification>();
			}
		}
		
		public System.Data.Linq.Table<ENTNotificationENTUserAccount> ENTNotificationENTUserAccounts
		{
			get
			{
				return this.GetTable<ENTNotificationENTUserAccount>();
			}
		}
		
		public System.Data.Linq.Table<ENTNotificationENTWFState> ENTNotificationENTWFStates
		{
			get
			{
				return this.GetTable<ENTNotificationENTWFState>();
			}
		}
		
		public System.Data.Linq.Table<ENTWorkflow> ENTWorkflows
		{
			get
			{
				return this.GetTable<ENTWorkflow>();
			}
		}
		
		public System.Data.Linq.Table<ENTReport> ENTReports
		{
			get
			{
				return this.GetTable<ENTReport>();
			}
		}
		
		public System.Data.Linq.Table<ENTAuditObjectProperty> ENTAuditObjectProperties
		{
			get
			{
				return this.GetTable<ENTAuditObjectProperty>();
			}
		}
		
		public System.Data.Linq.Table<ENTAudit> ENTAudits
		{
			get
			{
				return this.GetTable<ENTAudit>();
			}
		}
		
		public System.Data.Linq.Table<ENTAuditObject> ENTAuditObjects
		{
			get
			{
				return this.GetTable<ENTAuditObject>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTUserAccountDelete")]
		public int ENTUserAccountDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTUserAccountId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTUserAccountInsert")]
		public int ENTUserAccountInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] ref System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WindowsAccountName", DbType="VarChar(50)")] string windowsAccountName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstName", DbType="VarChar(50)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LastName", DbType="VarChar(50)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Email", DbType="VarChar(100)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTUserAccountId, windowsAccountName, firstName, lastName, email, isActive, insertENTUserAccountId);
			eNTUserAccountId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTUserAccountUpdate")]
		public int ENTUserAccountUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WindowsAccountName", DbType="VarChar(50)")] string windowsAccountName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FirstName", DbType="VarChar(50)")] string firstName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LastName", DbType="VarChar(50)")] string lastName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Email", DbType="VarChar(100)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActive", DbType="Bit")] System.Nullable<bool> isActive, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTUserAccountId, windowsAccountName, firstName, lastName, email, isActive, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTUserAccountSelectAll")]
		public ISingleResult<ENTUserAccount> ENTUserAccountSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTUserAccount>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTUserAccountSelectById")]
		public ISingleResult<ENTUserAccount> ENTUserAccountSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTUserAccountId);
			return ((ISingleResult<ENTUserAccount>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTMenuItemSelectAll")]
		public ISingleResult<ENTMenuItem> ENTMenuItemSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTMenuItem>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleDelete")]
		public int ENTRoleDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleId", DbType="Int")] System.Nullable<int> eNTRoleId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTRoleId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleInsert")]
		public int ENTRoleInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleId", DbType="Int")] ref System.Nullable<int> eNTRoleId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleName", DbType="VarChar(50)")] string roleName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTRoleId, roleName, insertENTUserAccountId);
			eNTRoleId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleUpdate")]
		public int ENTRoleUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleId", DbType="Int")] System.Nullable<int> eNTRoleId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleName", DbType="VarChar(50)")] string roleName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTRoleId, roleName, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleSelectAll")]
		public ISingleResult<ENTRole> ENTRoleSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTRole>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleSelectById")]
		public ISingleResult<ENTRole> ENTRoleSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleId", DbType="Int")] System.Nullable<int> eNTRoleId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTRoleId);
			return ((ISingleResult<ENTRole>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleCapabilityInsert")]
		public int ENTRoleCapabilityInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleCapabilityId", DbType="Int")] ref System.Nullable<int> eNTRoleCapabilityId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleId", DbType="Int")] System.Nullable<int> eNTRoleId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTCapabilityId", DbType="Int")] System.Nullable<int> eNTCapabilityId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccessFlag", DbType="TinyInt")] System.Nullable<byte> accessFlag, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTRoleCapabilityId, eNTRoleId, eNTCapabilityId, accessFlag, insertENTUserAccountId);
			eNTRoleCapabilityId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleCapabilityUpdate")]
		public int ENTRoleCapabilityUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleCapabilityId", DbType="Int")] System.Nullable<int> eNTRoleCapabilityId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleId", DbType="Int")] System.Nullable<int> eNTRoleId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTCapabilityId", DbType="Int")] System.Nullable<int> eNTCapabilityId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccessFlag", DbType="TinyInt")] System.Nullable<byte> accessFlag, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTRoleCapabilityId, eNTRoleId, eNTCapabilityId, accessFlag, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleCapabilitySelectByENTRoleId")]
		public ISingleResult<ENTRoleCapability> ENTRoleCapabilitySelectByENTRoleId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleId", DbType="Int")] System.Nullable<int> eNTRoleId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTRoleId);
			return ((ISingleResult<ENTRoleCapability>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleCapabilityDelete")]
		public int ENTRoleCapabilityDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleCapabilityId", DbType="Int")] System.Nullable<int> eNTRoleCapabilityId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTRoleCapabilityId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleUserAccountDelete")]
		public int ENTRoleUserAccountDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleUserAccountId", DbType="Int")] System.Nullable<int> eNTRoleUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTRoleUserAccountId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleUserAccountInsert")]
		public int ENTRoleUserAccountInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleUserAccountId", DbType="Int")] ref System.Nullable<int> eNTRoleUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleId", DbType="Int")] System.Nullable<int> eNTRoleId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTRoleUserAccountId, eNTRoleId, eNTUserAccountId, insertENTUserAccountId);
			eNTRoleUserAccountId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleUserAccountUpdate")]
		public int ENTRoleUserAccountUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleUserAccountId", DbType="Int")] System.Nullable<int> eNTRoleUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleId", DbType="Int")] System.Nullable<int> eNTRoleId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTRoleUserAccountId, eNTRoleId, eNTUserAccountId, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleUserAccountSelectByENTRoleId")]
		public ISingleResult<ENTRoleUserAccount> ENTRoleUserAccountSelectByENTRoleId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleId", DbType="Int")] System.Nullable<int> eNTRoleId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTRoleId);
			return ((ISingleResult<ENTRoleUserAccount>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleSelectByENTUserAccountId")]
		public ISingleResult<ENTRole> ENTRoleSelectByENTUserAccountId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTUserAccountId);
			return ((ISingleResult<ENTRole>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTCapabilitySelectAll")]
		public ISingleResult<ENTCapability> ENTCapabilitySelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTCapability>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTCapabilitySelectById")]
		public ISingleResult<ENTCapability> ENTCapabilitySelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTCapabilityId", DbType="Int")] System.Nullable<int> eNTCapabilityId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTCapabilityId);
			return ((ISingleResult<ENTCapability>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFOwnerGroupUserAccountSelectAll")]
		public ISingleResult<ENTWFOwnerGroupUserAccount> ENTWFOwnerGroupUserAccountSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTWFOwnerGroupUserAccount>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFOwnerGroupUserAccountSelectById")]
		public ISingleResult<ENTWFOwnerGroupUserAccount> ENTWFOwnerGroupUserAccountSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupUserAccountId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFOwnerGroupUserAccountId);
			return ((ISingleResult<ENTWFOwnerGroupUserAccount>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFOwnerGroupUserAccountDelete")]
		public int ENTWFOwnerGroupUserAccountDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupUserAccountId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFOwnerGroupUserAccountId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFOwnerGroupUserAccountInsert")]
		public int ENTWFOwnerGroupUserAccountInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupUserAccountId", DbType="Int")] ref System.Nullable<int> eNTWFOwnerGroupUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFOwnerGroupUserAccountId, eNTWFOwnerGroupId, eNTUserAccountId, insertENTUserAccountId);
			eNTWFOwnerGroupUserAccountId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFOwnerGroupUserAccountUpdate")]
		public int ENTWFOwnerGroupUserAccountUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupUserAccountId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFOwnerGroupUserAccountId, eNTWFOwnerGroupId, eNTUserAccountId, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFOwnerGroupSelectCountByNameWorkflowId")]
		public ISingleResult<ENTWFOwnerGroupSelectCountByNameWorkflowIdResult> ENTWFOwnerGroupSelectCountByNameWorkflowId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerGroupName", DbType="VarChar(50)")] string ownerGroupName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFOwnerGroupId, eNTWorkflowId, ownerGroupName);
			return ((ISingleResult<ENTWFOwnerGroupSelectCountByNameWorkflowIdResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFOwnerGroupUserAccountSelectByENTWFOwnerGroupId")]
		public ISingleResult<ENTWFOwnerGroupUserAccount> ENTWFOwnerGroupUserAccountSelectByENTWFOwnerGroupId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFOwnerGroupId);
			return ((ISingleResult<ENTWFOwnerGroupUserAccount>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFStateSelectCountByENTWFOwnerGroupId")]
		public ISingleResult<ENTWFStateSelectCountByENTWFOwnerGroupIdResult> ENTWFStateSelectCountByENTWFOwnerGroupId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFOwnerGroupId);
			return ((ISingleResult<ENTWFStateSelectCountByENTWFOwnerGroupIdResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTUserAccountSelectByENTWFOwnerGroupId")]
		public ISingleResult<ENTUserAccount> ENTUserAccountSelectByENTWFOwnerGroupId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFOwnerGroupId);
			return ((ISingleResult<ENTUserAccount>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFStatePropertyDelete")]
		public int ENTWFStatePropertyDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStatePropertyId", DbType="Int")] System.Nullable<int> eNTWFStatePropertyId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFStatePropertyId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFStatePropertyDeleteByENTWFStateId")]
		public int ENTWFStatePropertyDeleteByENTWFStateId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStateId", DbType="Int")] System.Nullable<int> eNTWFStateId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFStateId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFStatePropertySelectAll")]
		public ISingleResult<ENTWFStateProperty> ENTWFStatePropertySelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTWFStateProperty>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFStatePropertySelectByENTWFStateId")]
		public ISingleResult<ENTWFStateProperty> ENTWFStatePropertySelectByENTWFStateId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStateId", DbType="Int")] System.Nullable<int> eNTWFStateId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFStateId);
			return ((ISingleResult<ENTWFStateProperty>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFStatePropertyInsert")]
		public int ENTWFStatePropertyInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStatePropertyId", DbType="Int")] ref System.Nullable<int> eNTWFStatePropertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStateId", DbType="Int")] System.Nullable<int> eNTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyName", DbType="VarChar(255)")] string propertyName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Required", DbType="Bit")] System.Nullable<bool> required, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReadOnly", DbType="Bit")] System.Nullable<bool> readOnly, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFStatePropertyId, eNTWFStateId, propertyName, required, readOnly, insertENTUserAccountId);
			eNTWFStatePropertyId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFStatePropertyUpdate")]
		public int ENTWFStatePropertyUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStatePropertyId", DbType="Int")] System.Nullable<int> eNTWFStatePropertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStateId", DbType="Int")] System.Nullable<int> eNTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyName", DbType="VarChar(255)")] string propertyName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Required", DbType="Bit")] System.Nullable<bool> required, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReadOnly", DbType="Bit")] System.Nullable<bool> readOnly, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFStatePropertyId, eNTWFStateId, propertyName, required, readOnly, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFStatePropertySelectById")]
		public ISingleResult<ENTWFStateProperty> ENTWFStatePropertySelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStatePropertyId", DbType="Int")] System.Nullable<int> eNTWFStatePropertyId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFStatePropertyId);
			return ((ISingleResult<ENTWFStateProperty>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemOwnerDelete")]
		public int ENTWFItemOwnerDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemOwnerId", DbType="Int")] System.Nullable<int> eNTWFItemOwnerId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFItemOwnerId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemOwnerInsert")]
		public int ENTWFItemOwnerInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemOwnerId", DbType="Int")] ref System.Nullable<int> eNTWFItemOwnerId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemId", DbType="Int")] System.Nullable<int> eNTWFItemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFItemOwnerId, eNTWFItemId, eNTWFOwnerGroupId, eNTUserAccountId, insertENTUserAccountId);
			eNTWFItemOwnerId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemOwnerUpdate")]
		public int ENTWFItemOwnerUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemOwnerId", DbType="Int")] System.Nullable<int> eNTWFItemOwnerId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemId", DbType="Int")] System.Nullable<int> eNTWFItemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFItemOwnerId, eNTWFItemId, eNTWFOwnerGroupId, eNTUserAccountId, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemOwnerSelectAll")]
		public ISingleResult<ENTWFItemOwner> ENTWFItemOwnerSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTWFItemOwner>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemOwnerSelectById")]
		public ISingleResult<ENTWFItemOwner> ENTWFItemOwnerSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemOwnerId", DbType="Int")] System.Nullable<int> eNTWFItemOwnerId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFItemOwnerId);
			return ((ISingleResult<ENTWFItemOwner>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemStateHistoryDelete")]
		public int ENTWFItemStateHistoryDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemStateHistoryId", DbType="Int")] System.Nullable<int> eNTWFItemStateHistoryId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFItemStateHistoryId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemStateHistoryInsert")]
		public int ENTWFItemStateHistoryInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemStateHistoryId", DbType="Int")] ref System.Nullable<int> eNTWFItemStateHistoryId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemId", DbType="Int")] System.Nullable<int> eNTWFItemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStateId", DbType="Int")] System.Nullable<int> eNTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFItemStateHistoryId, eNTWFItemId, eNTWFStateId, eNTUserAccountId, insertENTUserAccountId);
			eNTWFItemStateHistoryId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemStateHistoryUpdate")]
		public int ENTWFItemStateHistoryUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemStateHistoryId", DbType="Int")] System.Nullable<int> eNTWFItemStateHistoryId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemId", DbType="Int")] System.Nullable<int> eNTWFItemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStateId", DbType="Int")] System.Nullable<int> eNTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFItemStateHistoryId, eNTWFItemId, eNTWFStateId, eNTUserAccountId, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemStateHistorySelectAll")]
		public ISingleResult<ENTWFItemStateHistory> ENTWFItemStateHistorySelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTWFItemStateHistory>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemStateHistorySelectById")]
		public ISingleResult<ENTWFItemStateHistory> ENTWFItemStateHistorySelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemStateHistoryId", DbType="Int")] System.Nullable<int> eNTWFItemStateHistoryId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFItemStateHistoryId);
			return ((ISingleResult<ENTWFItemStateHistory>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemOwnerSelectByENTWFItemId")]
		public ISingleResult<ENTWFItemOwner> ENTWFItemOwnerSelectByENTWFItemId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemId", DbType="Int")] System.Nullable<int> eNTWFItemId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFItemId);
			return ((ISingleResult<ENTWFItemOwner>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.HolidayDelete")]
		public int HolidayDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="HolidayId", DbType="Int")] System.Nullable<int> holidayId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), holidayId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.HolidayInsert")]
		public int HolidayInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="HolidayId", DbType="Int")] ref System.Nullable<int> holidayId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="HolidayName", DbType="VarChar(50)")] string holidayName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="HolidayDate", DbType="DateTime")] System.Nullable<System.DateTime> holidayDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), holidayId, holidayName, holidayDate, insertENTUserAccountId);
			holidayId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.HolidayUpdate")]
		public int HolidayUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="HolidayId", DbType="Int")] System.Nullable<int> holidayId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="HolidayName", DbType="VarChar(50)")] string holidayName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="HolidayDate", DbType="DateTime")] System.Nullable<System.DateTime> holidayDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), holidayId, holidayName, holidayDate, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.HolidaySelectAll")]
		public ISingleResult<Holiday> HolidaySelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Holiday>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.HolidaySelectById")]
		public ISingleResult<Holiday> HolidaySelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="HolidayId", DbType="Int")] System.Nullable<int> holidayId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), holidayId);
			return ((ISingleResult<Holiday>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTORequestDelete")]
		public int PTORequestDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTORequestId", DbType="Int")] System.Nullable<int> pTORequestId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pTORequestId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTORequestInsert")]
		public int PTORequestInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTORequestId", DbType="Int")] ref System.Nullable<int> pTORequestId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RequestDate", DbType="DateTime")] System.Nullable<System.DateTime> requestDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTODayTypeId", DbType="Int")] System.Nullable<int> pTODayTypeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTORequestTypeId", DbType="Int")] System.Nullable<int> pTORequestTypeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pTORequestId, eNTUserAccountId, requestDate, pTODayTypeId, pTORequestTypeId, insertENTUserAccountId);
			pTORequestId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTORequestUpdate")]
		public int PTORequestUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTORequestId", DbType="Int")] System.Nullable<int> pTORequestId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RequestDate", DbType="DateTime")] System.Nullable<System.DateTime> requestDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTODayTypeId", DbType="Int")] System.Nullable<int> pTODayTypeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTORequestTypeId", DbType="Int")] System.Nullable<int> pTORequestTypeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pTORequestId, eNTUserAccountId, requestDate, pTODayTypeId, pTORequestTypeId, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTORequestSelectAll")]
		public ISingleResult<PTORequest> PTORequestSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<PTORequest>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTORequestSelectById")]
		public ISingleResult<PTORequest> PTORequestSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTORequestId", DbType="Int")] System.Nullable<int> pTORequestId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pTORequestId);
			return ((ISingleResult<PTORequest>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTORequestSelectPreviousByENTUserAccountId")]
		public ISingleResult<PTORequest> PTORequestSelectPreviousByENTUserAccountId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTORequestId", DbType="Int")] System.Nullable<int> pTORequestId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pTORequestId, eNTUserAccountId);
			return ((ISingleResult<PTORequest>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTODayTypeSelectAll")]
		public ISingleResult<PTODayType> PTODayTypeSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<PTODayType>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTODayTypeSelectById")]
		public ISingleResult<PTODayType> PTODayTypeSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTODayTypeId", DbType="Int")] System.Nullable<int> pTODayTypeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pTODayTypeId);
			return ((ISingleResult<PTODayType>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTORequestTypeSelectAll")]
		public ISingleResult<PTORequestType> PTORequestTypeSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<PTORequestType>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTORequestTypeSelectById")]
		public ISingleResult<PTORequestType> PTORequestTypeSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTORequestTypeId", DbType="Int")] System.Nullable<int> pTORequestTypeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pTORequestTypeId);
			return ((ISingleResult<PTORequestType>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTOVacationBankDelete")]
		public int PTOVacationBankDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTOVacationBankId", DbType="Int")] System.Nullable<int> pTOVacationBankId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pTOVacationBankId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTOVacationBankInsert")]
		public int PTOVacationBankInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTOVacationBankId", DbType="Int")] ref System.Nullable<int> pTOVacationBankId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VacationYear", DbType="SmallInt")] System.Nullable<short> vacationYear, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonalDays", DbType="TinyInt")] System.Nullable<byte> personalDays, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VacationDays", DbType="TinyInt")] System.Nullable<byte> vacationDays, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pTOVacationBankId, eNTUserAccountId, vacationYear, personalDays, vacationDays, insertENTUserAccountId);
			pTOVacationBankId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTOVacationBankUpdate")]
		public int PTOVacationBankUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTOVacationBankId", DbType="Int")] System.Nullable<int> pTOVacationBankId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VacationYear", DbType="SmallInt")] System.Nullable<short> vacationYear, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonalDays", DbType="TinyInt")] System.Nullable<byte> personalDays, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VacationDays", DbType="TinyInt")] System.Nullable<byte> vacationDays, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pTOVacationBankId, eNTUserAccountId, vacationYear, personalDays, vacationDays, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTOVacationBankSelectAll")]
		public ISingleResult<PTOVacationBank> PTOVacationBankSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<PTOVacationBank>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTOVacationBankSelectById")]
		public ISingleResult<PTOVacationBank> PTOVacationBankSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTOVacationBankId", DbType="Int")] System.Nullable<int> pTOVacationBankId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pTOVacationBankId);
			return ((ISingleResult<PTOVacationBank>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTOVacationBankIsDuplicate")]
		public ISingleResult<PTOVacationBankIsDuplicateResult> PTOVacationBankIsDuplicate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTOVacationBankId", DbType="Int")] System.Nullable<int> pTOVacationBankId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VacationYear", DbType="SmallInt")] System.Nullable<short> vacationYear)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pTOVacationBankId, eNTUserAccountId, vacationYear);
			return ((ISingleResult<PTOVacationBankIsDuplicateResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTOVacationBankSelectDistinctYears")]
		public ISingleResult<PTOVacationBankSelectDistinctYearsResult> PTOVacationBankSelectDistinctYears()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<PTOVacationBankSelectDistinctYearsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTOVacationBankCopyYear")]
		public int PTOVacationBankCopyYear([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FromYear", DbType="SmallInt")] System.Nullable<short> fromYear, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ToYear", DbType="SmallInt")] System.Nullable<short> toYear, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fromYear, toYear, insertENTUserAccountId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTOVacationBankSelectByUserAccountIdYear")]
		public ISingleResult<PTOVacationBank> PTOVacationBankSelectByUserAccountIdYear([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountid", DbType="Int")] System.Nullable<int> eNTUserAccountid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VacationYear", DbType="SmallInt")] System.Nullable<short> vacationYear)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTUserAccountid, vacationYear);
			return ((ISingleResult<PTOVacationBank>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTORequestSelectByENTUserAccountIdYear")]
		public ISingleResult<PTORequestSelectByENTUserAccountIdYearResult> PTORequestSelectByENTUserAccountIdYear([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTORequestId", DbType="Int")] System.Nullable<int> pTORequestId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VacationYear", DbType="SmallInt")] System.Nullable<short> vacationYear)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pTORequestId, eNTUserAccountId, vacationYear);
			return ((ISingleResult<PTORequestSelectByENTUserAccountIdYearResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemStateHistorySelectByENTWFItemId")]
		public ISingleResult<ENTWFItemStateHistory> ENTWFItemStateHistorySelectByENTWFItemId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemId", DbType="Int")] System.Nullable<int> eNTWFItemId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFItemId);
			return ((ISingleResult<ENTWFItemStateHistory>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTORequestSelectByENTUserAccountId")]
		public ISingleResult<PTORequest> PTORequestSelectByENTUserAccountId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTUserAccountId);
			return ((ISingleResult<PTORequest>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFOwnerGroupDelete")]
		public int ENTWFOwnerGroupDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFOwnerGroupId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFOwnerGroupInsert")]
		public int ENTWFOwnerGroupInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] ref System.Nullable<int> eNTWFOwnerGroupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerGroupName", DbType="VarChar(50)")] string ownerGroupName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DefaultENTUserAccountId", DbType="Int")] System.Nullable<int> defaultENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDefaultSameAsLast", DbType="Bit")] System.Nullable<bool> isDefaultSameAsLast, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(255)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFOwnerGroupId, eNTWorkflowId, ownerGroupName, defaultENTUserAccountId, isDefaultSameAsLast, description, insertENTUserAccountId);
			eNTWFOwnerGroupId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFOwnerGroupUpdate")]
		public int ENTWFOwnerGroupUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OwnerGroupName", DbType="VarChar(50)")] string ownerGroupName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DefaultENTUserAccountId", DbType="Int")] System.Nullable<int> defaultENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDefaultSameAsLast", DbType="Bit")] System.Nullable<bool> isDefaultSameAsLast, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(255)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFOwnerGroupId, eNTWorkflowId, ownerGroupName, defaultENTUserAccountId, isDefaultSameAsLast, description, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFOwnerGroupSelectAll")]
		public ISingleResult<ENTWFOwnerGroup> ENTWFOwnerGroupSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTWFOwnerGroup>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFOwnerGroupSelectByENTWorkflowId")]
		public ISingleResult<ENTWFOwnerGroup> ENTWFOwnerGroupSelectByENTWorkflowId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWorkflowId);
			return ((ISingleResult<ENTWFOwnerGroup>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFOwnerGroupSelectById")]
		public ISingleResult<ENTWFOwnerGroup> ENTWFOwnerGroupSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFOwnerGroupId);
			return ((ISingleResult<ENTWFOwnerGroup>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemOwnerSelectLastUserByGroupId")]
		public ISingleResult<ENTWFItemOwnerSelectLastUserByGroupIdResult> ENTWFItemOwnerSelectLastUserByGroupId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFOwnerGroupId, eNTUserAccountId);
			return ((ISingleResult<ENTWFItemOwnerSelectLastUserByGroupIdResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemDelete")]
		public int ENTWFItemDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemId", DbType="Int")] System.Nullable<int> eNTWFItemId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFItemId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemInsert")]
		public int ENTWFItemInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemId", DbType="Int")] ref System.Nullable<int> eNTWFItemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubmitterENTUserAccountId", DbType="Int")] System.Nullable<int> submitterENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CurrentWFStateId", DbType="Int")] System.Nullable<int> currentWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFItemId, eNTWorkflowId, itemId, submitterENTUserAccountId, currentWFStateId, insertENTUserAccountId);
			eNTWFItemId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemUpdate")]
		public int ENTWFItemUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemId", DbType="Int")] System.Nullable<int> eNTWFItemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubmitterENTUserAccountId", DbType="Int")] System.Nullable<int> submitterENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CurrentWFStateId", DbType="Int")] System.Nullable<int> currentWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFItemId, eNTWorkflowId, itemId, submitterENTUserAccountId, currentWFStateId, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemSelectAll")]
		public ISingleResult<ENTWFItem> ENTWFItemSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTWFItem>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemSelectById")]
		public ISingleResult<ENTWFItem> ENTWFItemSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFItemId", DbType="Int")] System.Nullable<int> eNTWFItemId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFItemId);
			return ((ISingleResult<ENTWFItem>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemSelectByItemId")]
		public ISingleResult<ENTWFItem> ENTWFItemSelectByItemId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWorkflowId, itemId);
			return ((ISingleResult<ENTWFItem>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFStateDelete")]
		public int ENTWFStateDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStateId", DbType="Int")] System.Nullable<int> eNTWFStateId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFStateId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFStateInsert")]
		public int ENTWFStateInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStateId", DbType="Int")] ref System.Nullable<int> eNTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="StateName", DbType="VarChar(50)")] string stateName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(255)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsOwnerSubmitter", DbType="Bit")] System.Nullable<bool> isOwnerSubmitter, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFStateId, eNTWorkflowId, stateName, description, eNTWFOwnerGroupId, isOwnerSubmitter, insertENTUserAccountId);
			eNTWFStateId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFStateUpdate")]
		public int ENTWFStateUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStateId", DbType="Int")] System.Nullable<int> eNTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="StateName", DbType="VarChar(50)")] string stateName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(255)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFOwnerGroupId", DbType="Int")] System.Nullable<int> eNTWFOwnerGroupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsOwnerSubmitter", DbType="Bit")] System.Nullable<bool> isOwnerSubmitter, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFStateId, eNTWorkflowId, stateName, description, eNTWFOwnerGroupId, isOwnerSubmitter, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFStateSelectAll")]
		public ISingleResult<ENTWFState> ENTWFStateSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTWFState>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFStateSelectByENTWorkflowId")]
		public ISingleResult<ENTWFState> ENTWFStateSelectByENTWorkflowId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWorkflowId);
			return ((ISingleResult<ENTWFState>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFStateSelectById")]
		public ISingleResult<ENTWFState> ENTWFStateSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStateId", DbType="Int")] System.Nullable<int> eNTWFStateId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFStateId);
			return ((ISingleResult<ENTWFState>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTORequestUpdateCancelled")]
		public int PTORequestUpdateCancelled([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTORequestId", DbType="Int")] System.Nullable<int> pTORequestId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cancelled", DbType="Bit")] System.Nullable<bool> cancelled)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pTORequestId, cancelled);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFTransitionDelete")]
		public int ENTWFTransitionDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFTransitionId", DbType="Int")] System.Nullable<int> eNTWFTransitionId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFTransitionId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFTransitionInsert")]
		public int ENTWFTransitionInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFTransitionId", DbType="Int")] ref System.Nullable<int> eNTWFTransitionId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TransitionName", DbType="VarChar(50)")] string transitionName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FromENTWFStateId", DbType="Int")] System.Nullable<int> fromENTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ToENTWFStateId", DbType="Int")] System.Nullable<int> toENTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PostTransitionMethodName", DbType="VarChar(255)")] string postTransitionMethodName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFTransitionId, eNTWorkflowId, transitionName, fromENTWFStateId, toENTWFStateId, postTransitionMethodName, insertENTUserAccountId);
			eNTWFTransitionId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFTransitionUpdate")]
		public int ENTWFTransitionUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFTransitionId", DbType="Int")] System.Nullable<int> eNTWFTransitionId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TransitionName", DbType="VarChar(50)")] string transitionName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FromENTWFStateId", DbType="Int")] System.Nullable<int> fromENTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ToENTWFStateId", DbType="Int")] System.Nullable<int> toENTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PostTransitionMethodName", DbType="VarChar(255)")] string postTransitionMethodName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFTransitionId, eNTWorkflowId, transitionName, fromENTWFStateId, toENTWFStateId, postTransitionMethodName, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFTransitionSelectAll")]
		public ISingleResult<ENTWFTransition> ENTWFTransitionSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTWFTransition>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFTransitionSelectById")]
		public ISingleResult<ENTWFTransition> ENTWFTransitionSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFTransitionId", DbType="Int")] System.Nullable<int> eNTWFTransitionId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFTransitionId);
			return ((ISingleResult<ENTWFTransition>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWFItemSelectByWorkflowId")]
		public ISingleResult<ENTWFItemSelectByWorkflowIdResult> ENTWFItemSelectByWorkflowId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWorkflowId);
			return ((ISingleResult<ENTWFItemSelectByWorkflowIdResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PTORequestSelectByCurrentOwner")]
		public ISingleResult<PTORequest> PTORequestSelectByCurrentOwner([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowObjectName", DbType="VarChar(255)")] string eNTWorkflowObjectName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTUserAccountId, eNTWorkflowObjectName);
			return ((ISingleResult<PTORequest>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTEmailDelete")]
		public int ENTEmailDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTEmailId", DbType="Int")] System.Nullable<int> eNTEmailId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTEmailId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTEmailInsert")]
		public int ENTEmailInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTEmailId", DbType="Int")] ref System.Nullable<int> eNTEmailId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ToEmailAddress", DbType="VarChar(MAX)")] string toEmailAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CCEmailAddress", DbType="VarChar(MAX)")] string cCEmailAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BCCEmailAddress", DbType="VarChar(MAX)")] string bCCEmailAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FromEmailAddress", DbType="VarChar(255)")] string fromEmailAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Subject", DbType="VarChar(MAX)")] string subject, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Body", DbType="VarChar(MAX)")] string body, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmailStatusFlag", DbType="TinyInt")] System.Nullable<byte> emailStatusFlag, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTEmailId, toEmailAddress, cCEmailAddress, bCCEmailAddress, fromEmailAddress, subject, body, emailStatusFlag, insertENTUserAccountId);
			eNTEmailId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTEmailUpdate")]
		public int ENTEmailUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTEmailId", DbType="Int")] System.Nullable<int> eNTEmailId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ToEmailAddress", DbType="VarChar(MAX)")] string toEmailAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CCEmailAddress", DbType="VarChar(MAX)")] string cCEmailAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BCCEmailAddress", DbType="VarChar(MAX)")] string bCCEmailAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FromEmailAddress", DbType="VarChar(255)")] string fromEmailAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Subject", DbType="VarChar(MAX)")] string subject, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Body", DbType="VarChar(MAX)")] string body, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmailStatusFlag", DbType="TinyInt")] System.Nullable<byte> emailStatusFlag, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTEmailId, toEmailAddress, cCEmailAddress, bCCEmailAddress, fromEmailAddress, subject, body, emailStatusFlag, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTEmailSelectAll")]
		public ISingleResult<ENTEmail> ENTEmailSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTEmail>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTEmailSelectById")]
		public ISingleResult<ENTEmail> ENTEmailSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTEmailId", DbType="Int")] System.Nullable<int> eNTEmailId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTEmailId);
			return ((ISingleResult<ENTEmail>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTEmailSelectByEmailStatusFlag")]
		public ISingleResult<ENTEmail> ENTEmailSelectByEmailStatusFlag([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmailStatusFlag", DbType="TinyInt")] System.Nullable<byte> emailStatusFlag)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), emailStatusFlag);
			return ((ISingleResult<ENTEmail>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationDelete")]
		public int ENTNotificationDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationId", DbType="Int")] System.Nullable<int> eNTNotificationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationInsert")]
		public int ENTNotificationInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationId", DbType="Int")] ref System.Nullable<int> eNTNotificationId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(255)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FromEmailAddress", DbType="VarChar(100)")] string fromEmailAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Subject", DbType="VarChar(MAX)")] string subject, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Body", DbType="VarChar(MAX)")] string body, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationId, description, fromEmailAddress, subject, body, insertENTUserAccountId);
			eNTNotificationId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationUpdate")]
		public int ENTNotificationUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationId", DbType="Int")] System.Nullable<int> eNTNotificationId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(255)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FromEmailAddress", DbType="VarChar(100)")] string fromEmailAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Subject", DbType="VarChar(MAX)")] string subject, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Body", DbType="VarChar(MAX)")] string body, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationId, description, fromEmailAddress, subject, body, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationSelectAll")]
		public ISingleResult<ENTNotification> ENTNotificationSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTNotification>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationSelectById")]
		public ISingleResult<ENTNotification> ENTNotificationSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationId", DbType="Int")] System.Nullable<int> eNTNotificationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationId);
			return ((ISingleResult<ENTNotification>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationENTUserAccountDelete")]
		public int ENTNotificationENTUserAccountDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationENTUserAccountId", DbType="Int")] System.Nullable<int> eNTNotificationENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationENTUserAccountId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationENTUserAccountInsert")]
		public int ENTNotificationENTUserAccountInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationENTUserAccountId", DbType="Int")] ref System.Nullable<int> eNTNotificationENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationId", DbType="Int")] System.Nullable<int> eNTNotificationId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationENTUserAccountId, eNTNotificationId, eNTUserAccountId, insertENTUserAccountId);
			eNTNotificationENTUserAccountId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationENTUserAccountUpdate")]
		public int ENTNotificationENTUserAccountUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationENTUserAccountId", DbType="Int")] System.Nullable<int> eNTNotificationENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationId", DbType="Int")] System.Nullable<int> eNTNotificationId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationENTUserAccountId, eNTNotificationId, eNTUserAccountId, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationENTUserAccountSelectAll")]
		public ISingleResult<ENTNotificationENTUserAccount> ENTNotificationENTUserAccountSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTNotificationENTUserAccount>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationENTUserAccountSelectById")]
		public ISingleResult<ENTNotificationENTUserAccount> ENTNotificationENTUserAccountSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationENTUserAccountId", DbType="Int")] System.Nullable<int> eNTNotificationENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationENTUserAccountId);
			return ((ISingleResult<ENTNotificationENTUserAccount>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationENTWFStateDelete")]
		public int ENTNotificationENTWFStateDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationENTWFStateId", DbType="Int")] System.Nullable<int> eNTNotificationENTWFStateId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationENTWFStateId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationENTWFStateInsert")]
		public int ENTNotificationENTWFStateInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationENTWFStateId", DbType="Int")] ref System.Nullable<int> eNTNotificationENTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationENTUserAccountId", DbType="Int")] System.Nullable<int> eNTNotificationENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStateId", DbType="Int")] System.Nullable<int> eNTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationENTWFStateId, eNTNotificationENTUserAccountId, eNTWFStateId, insertENTUserAccountId);
			eNTNotificationENTWFStateId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationENTWFStateUpdate")]
		public int ENTNotificationENTWFStateUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationENTWFStateId", DbType="Int")] System.Nullable<int> eNTNotificationENTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationENTUserAccountId", DbType="Int")] System.Nullable<int> eNTNotificationENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStateId", DbType="Int")] System.Nullable<int> eNTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationENTWFStateId, eNTNotificationENTUserAccountId, eNTWFStateId, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationENTWFStateSelectAll")]
		public ISingleResult<ENTNotificationENTWFState> ENTNotificationENTWFStateSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTNotificationENTWFState>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationENTWFStateSelectById")]
		public ISingleResult<ENTNotificationENTWFState> ENTNotificationENTWFStateSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationENTWFStateId", DbType="Int")] System.Nullable<int> eNTNotificationENTWFStateId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationENTWFStateId);
			return ((ISingleResult<ENTNotificationENTWFState>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationENTUserAccountSelectByENTUserAccountId")]
		public ISingleResult<ENTNotificationENTUserAccount> ENTNotificationENTUserAccountSelectByENTUserAccountId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTUserAccountId);
			return ((ISingleResult<ENTNotificationENTUserAccount>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationENTWFStateSelectByENTNotificationENTUserAccountId")]
		public ISingleResult<ENTNotificationENTWFState> ENTNotificationENTWFStateSelectByENTNotificationENTUserAccountId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationENTUserAccountId", DbType="Int")] System.Nullable<int> eNTNotificationENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationENTUserAccountId);
			return ((ISingleResult<ENTNotificationENTWFState>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationENTWFStateDeleteByENTNotificationENTUserAccountId")]
		public int ENTNotificationENTWFStateDeleteByENTNotificationENTUserAccountId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationENTUserAccountId", DbType="Int")] System.Nullable<int> eNTNotificationENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationENTUserAccountId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationSelectByIdENTUserAccountId")]
		public ISingleResult<ENTNotification> ENTNotificationSelectByIdENTUserAccountId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationId", DbType="Int")] System.Nullable<int> eNTNotificationId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountid", DbType="Int")] System.Nullable<int> eNTUserAccountid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTNotificationId, eNTUserAccountid);
			return ((ISingleResult<ENTNotification>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTNotificationENTUserAccountSelectByENTWFStateId")]
		public ISingleResult<ENTNotificationENTUserAccount> ENTNotificationENTUserAccountSelectByENTWFStateId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWFStateId", DbType="Int")] System.Nullable<int> eNTWFStateId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTNotificationId", DbType="Int")] System.Nullable<int> eNTNotificationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWFStateId, eNTNotificationId);
			return ((ISingleResult<ENTNotificationENTUserAccount>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWorkflowDelete")]
		public int ENTWorkflowDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWorkflowId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWorkflowInsert")]
		public int ENTWorkflowInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] ref System.Nullable<int> eNTWorkflowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WorkflowName", DbType="VarChar(50)")] string workflowName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowObjectName", DbType="VarChar(255)")] string eNTWorkflowObjectName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWorkflowId, workflowName, eNTWorkflowObjectName, insertENTUserAccountId);
			eNTWorkflowId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWorkflowUpdate")]
		public int ENTWorkflowUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="WorkflowName", DbType="VarChar(50)")] string workflowName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowObjectName", DbType="VarChar(255)")] string eNTWorkflowObjectName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWorkflowId, workflowName, eNTWorkflowObjectName, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWorkflowSelectAll")]
		public ISingleResult<ENTWorkflow> ENTWorkflowSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTWorkflow>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWorkflowSelectById")]
		public ISingleResult<ENTWorkflow> ENTWorkflowSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowId", DbType="Int")] System.Nullable<int> eNTWorkflowId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWorkflowId);
			return ((ISingleResult<ENTWorkflow>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTWorkflowSelectByObjectName")]
		public ISingleResult<ENTWorkflow> ENTWorkflowSelectByObjectName([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowObjectName", DbType="VarChar(255)")] string eNTWorkflowObjectName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWorkflowObjectName);
			return ((ISingleResult<ENTWorkflow>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ReportRoleCapability")]
		public ISingleResult<ReportRoleCapabilityResult> ReportRoleCapability()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ReportRoleCapabilityResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ReportRoleUserAccount")]
		public ISingleResult<ReportRoleUserAccountResult> ReportRoleUserAccount()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ReportRoleUserAccountResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ReportMyPTORequests")]
		public ISingleResult<ReportMyPTORequestsResult> ReportMyPTORequests([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTWorkflowObjectName", DbType="VarChar(255)")] string eNTWorkflowObjectName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTUserAccountId", DbType="Int")] System.Nullable<int> eNTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTWorkflowObjectName, eNTUserAccountId);
			return ((ISingleResult<ReportMyPTORequestsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTReportDelete")]
		public int ENTReportDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTReportId", DbType="Int")] System.Nullable<int> eNTReportId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTReportId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTReportInsert")]
		public int ENTReportInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTReportId", DbType="Int")] ref System.Nullable<int> eNTReportId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReportName", DbType="VarChar(50)")] string reportName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FileName", DbType="VarChar(255)")] string fileName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ObjectName", DbType="VarChar(255)")] string objectName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(255)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubReportObjectName", DbType="VarChar(255)")] string subReportObjectName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubReportMethodName", DbType="VarChar(50)")] string subReportMethodName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTReportId, reportName, fileName, objectName, description, subReportObjectName, subReportMethodName, insertENTUserAccountId);
			eNTReportId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTReportUpdate")]
		public int ENTReportUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTReportId", DbType="Int")] System.Nullable<int> eNTReportId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReportName", DbType="VarChar(50)")] string reportName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FileName", DbType="VarChar(255)")] string fileName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ObjectName", DbType="VarChar(255)")] string objectName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="VarChar(255)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubReportObjectName", DbType="VarChar(255)")] string subReportObjectName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SubReportMethodName", DbType="VarChar(50)")] string subReportMethodName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTReportId, reportName, fileName, objectName, description, subReportObjectName, subReportMethodName, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTReportSelectAll")]
		public ISingleResult<ENTReport> ENTReportSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTReport>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTReportSelectById")]
		public ISingleResult<ENTReport> ENTReportSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTReportId", DbType="Int")] System.Nullable<int> eNTReportId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTReportId);
			return ((ISingleResult<ENTReport>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditObjectDelete")]
		public int ENTAuditObjectDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditObjectId", DbType="Int")] System.Nullable<int> eNTAuditObjectId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTAuditObjectId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditObjectPropertyDelete")]
		public int ENTAuditObjectPropertyDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditObjectPropertyId", DbType="Int")] System.Nullable<int> eNTAuditObjectPropertyId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTAuditObjectPropertyId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditObjectPropertyInsert")]
		public int ENTAuditObjectPropertyInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditObjectPropertyId", DbType="Int")] ref System.Nullable<int> eNTAuditObjectPropertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditObjectId", DbType="Int")] System.Nullable<int> eNTAuditObjectId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyName", DbType="VarChar(255)")] string propertyName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTAuditObjectPropertyId, eNTAuditObjectId, propertyName, insertENTUserAccountId);
			eNTAuditObjectPropertyId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditObjectPropertyUpdate")]
		public int ENTAuditObjectPropertyUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditObjectPropertyId", DbType="Int")] System.Nullable<int> eNTAuditObjectPropertyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditObjectId", DbType="Int")] System.Nullable<int> eNTAuditObjectId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyName", DbType="VarChar(255)")] string propertyName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTAuditObjectPropertyId, eNTAuditObjectId, propertyName, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditObjectPropertySelectAll")]
		public ISingleResult<ENTAuditObjectProperty> ENTAuditObjectPropertySelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTAuditObjectProperty>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditObjectPropertySelectById")]
		public ISingleResult<ENTAuditObjectProperty> ENTAuditObjectPropertySelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditObjectPropertyId", DbType="Int")] System.Nullable<int> eNTAuditObjectPropertyId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTAuditObjectPropertyId);
			return ((ISingleResult<ENTAuditObjectProperty>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditObjectPropertyDeleteByENTAuditObjectId")]
		public int ENTAuditObjectPropertyDeleteByENTAuditObjectId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditObjectId", DbType="Int")] System.Nullable<int> eNTAuditObjectId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTAuditObjectId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditObjectPropertySelectByENTAuditObjectId")]
		public ISingleResult<ENTAuditObjectProperty> ENTAuditObjectPropertySelectByENTAuditObjectId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditObjectId", DbType="Int")] System.Nullable<int> eNTAuditObjectId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTAuditObjectId);
			return ((ISingleResult<ENTAuditObjectProperty>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditDelete")]
		public int ENTAuditDelete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditId", DbType="Int")] System.Nullable<int> eNTAuditId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTAuditId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditInsert")]
		public int ENTAuditInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditId", DbType="Int")] ref System.Nullable<int> eNTAuditId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ObjectName", DbType="VarChar(255)")] string objectName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordId", DbType="Int")] System.Nullable<int> recordId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyName", DbType="VarChar(255)")] string propertyName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OldValue", DbType="VarChar(MAX)")] string oldValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewValue", DbType="VarChar(MAX)")] string newValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AuditType", DbType="TinyInt")] System.Nullable<byte> auditType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTAuditId, objectName, recordId, propertyName, oldValue, newValue, auditType, insertENTUserAccountId);
			eNTAuditId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditUpdate")]
		public int ENTAuditUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditId", DbType="Int")] System.Nullable<int> eNTAuditId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ObjectName", DbType="VarChar(255)")] string objectName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RecordId", DbType="Int")] System.Nullable<int> recordId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PropertyName", DbType="VarChar(255)")] string propertyName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OldValue", DbType="VarChar(MAX)")] string oldValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewValue", DbType="VarChar(MAX)")] string newValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AuditType", DbType="TinyInt")] System.Nullable<byte> auditType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTAuditId, objectName, recordId, propertyName, oldValue, newValue, auditType, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditSelectAll")]
		public ISingleResult<ENTAudit> ENTAuditSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTAudit>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditSelectById")]
		public ISingleResult<ENTAudit> ENTAuditSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditId", DbType="Int")] System.Nullable<int> eNTAuditId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTAuditId);
			return ((ISingleResult<ENTAudit>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ReportAudit")]
		public ISingleResult<ReportAuditResult> ReportAudit()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ReportAuditResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditObjectInsert")]
		public int ENTAuditObjectInsert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditObjectId", DbType="Int")] ref System.Nullable<int> eNTAuditObjectId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ObjectName", DbType="VarChar(255)")] string objectName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ObjectFullyQualifiedName", DbType="VarChar(255)")] string objectFullyQualifiedName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InsertENTUserAccountId", DbType="Int")] System.Nullable<int> insertENTUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTAuditObjectId, objectName, objectFullyQualifiedName, insertENTUserAccountId);
			eNTAuditObjectId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditObjectUpdate")]
		public int ENTAuditObjectUpdate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditObjectId", DbType="Int")] System.Nullable<int> eNTAuditObjectId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ObjectName", DbType="VarChar(255)")] string objectName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ObjectFullyQualifiedName", DbType="VarChar(255)")] string objectFullyQualifiedName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UpdateENTUserAccountId", DbType="Int")] System.Nullable<int> updateENTUserAccountId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Version", DbType="Timestamp")] System.Data.Linq.Binary version)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTAuditObjectId, objectName, objectFullyQualifiedName, updateENTUserAccountId, version);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditObjectSelectAll")]
		public ISingleResult<ENTAuditObject> ENTAuditObjectSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTAuditObject>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditObjectSelectById")]
		public ISingleResult<ENTAuditObject> ENTAuditObjectSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTAuditObjectId", DbType="Int")] System.Nullable<int> eNTAuditObjectId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTAuditObjectId);
			return ((ISingleResult<ENTAuditObject>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTAuditObjectSelectByObjectName")]
		public ISingleResult<ENTAuditObject> ENTAuditObjectSelectByObjectName([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ObjectName", DbType="VarChar(255)")] string objectName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), objectName);
			return ((ISingleResult<ENTAuditObject>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleCapabilitySelectAll")]
		public ISingleResult<ENTRoleCapability> ENTRoleCapabilitySelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTRoleCapability>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleCapabilitySelectById")]
		public ISingleResult<ENTRoleCapability> ENTRoleCapabilitySelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleCapabilityId", DbType="Int")] System.Nullable<int> eNTRoleCapabilityId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTRoleCapabilityId);
			return ((ISingleResult<ENTRoleCapability>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleUserAccountSelectAll")]
		public ISingleResult<ENTRoleUserAccount> ENTRoleUserAccountSelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ENTRoleUserAccount>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ENTRoleUserAccountSelectById")]
		public ISingleResult<ENTRoleUserAccount> ENTRoleUserAccountSelectById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ENTRoleUserAccountId", DbType="Int")] System.Nullable<int> eNTRoleUserAccountId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eNTRoleUserAccountId);
			return ((ISingleResult<ENTRoleUserAccount>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTUserAccount")]
	public partial class ENTUserAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTUserAccountId;
		
		private string _WindowsAccountName;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private bool _IsActive;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<ENTRoleUserAccount> _ENTRoleUserAccounts;
		
		private EntitySet<ENTWFOwnerGroupUserAccount> _ENTWFOwnerGroupUserAccounts;
		
		private EntitySet<ENTWFItemOwner> _ENTWFItemOwners;
		
		private EntitySet<ENTWFItemStateHistory> _ENTWFItemStateHistories;
		
		private EntitySet<PTORequest> _PTORequests;
		
		private EntitySet<PTOVacationBank> _PTOVacationBanks;
		
		private EntitySet<ENTWFItem> _ENTWFItems;
		
		private EntitySet<ENTNotificationENTUserAccount> _ENTNotificationENTUserAccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTUserAccountIdChanging(int value);
    partial void OnENTUserAccountIdChanged();
    partial void OnWindowsAccountNameChanging(string value);
    partial void OnWindowsAccountNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTUserAccount()
		{
			this._ENTRoleUserAccounts = new EntitySet<ENTRoleUserAccount>(new Action<ENTRoleUserAccount>(this.attach_ENTRoleUserAccounts), new Action<ENTRoleUserAccount>(this.detach_ENTRoleUserAccounts));
			this._ENTWFOwnerGroupUserAccounts = new EntitySet<ENTWFOwnerGroupUserAccount>(new Action<ENTWFOwnerGroupUserAccount>(this.attach_ENTWFOwnerGroupUserAccounts), new Action<ENTWFOwnerGroupUserAccount>(this.detach_ENTWFOwnerGroupUserAccounts));
			this._ENTWFItemOwners = new EntitySet<ENTWFItemOwner>(new Action<ENTWFItemOwner>(this.attach_ENTWFItemOwners), new Action<ENTWFItemOwner>(this.detach_ENTWFItemOwners));
			this._ENTWFItemStateHistories = new EntitySet<ENTWFItemStateHistory>(new Action<ENTWFItemStateHistory>(this.attach_ENTWFItemStateHistories), new Action<ENTWFItemStateHistory>(this.detach_ENTWFItemStateHistories));
			this._PTORequests = new EntitySet<PTORequest>(new Action<PTORequest>(this.attach_PTORequests), new Action<PTORequest>(this.detach_PTORequests));
			this._PTOVacationBanks = new EntitySet<PTOVacationBank>(new Action<PTOVacationBank>(this.attach_PTOVacationBanks), new Action<PTOVacationBank>(this.detach_PTOVacationBanks));
			this._ENTWFItems = new EntitySet<ENTWFItem>(new Action<ENTWFItem>(this.attach_ENTWFItems), new Action<ENTWFItem>(this.detach_ENTWFItems));
			this._ENTNotificationENTUserAccounts = new EntitySet<ENTNotificationENTUserAccount>(new Action<ENTNotificationENTUserAccount>(this.attach_ENTNotificationENTUserAccounts), new Action<ENTNotificationENTUserAccount>(this.detach_ENTNotificationENTUserAccounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTUserAccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTUserAccountId
		{
			get
			{
				return this._ENTUserAccountId;
			}
			set
			{
				if ((this._ENTUserAccountId != value))
				{
					this.OnENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._ENTUserAccountId = value;
					this.SendPropertyChanged("ENTUserAccountId");
					this.OnENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WindowsAccountName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string WindowsAccountName
		{
			get
			{
				return this._WindowsAccountName;
			}
			set
			{
				if ((this._WindowsAccountName != value))
				{
					this.OnWindowsAccountNameChanging(value);
					this.SendPropertyChanging();
					this._WindowsAccountName = value;
					this.SendPropertyChanged("WindowsAccountName");
					this.OnWindowsAccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_ENTRoleUserAccount", Storage="_ENTRoleUserAccounts", ThisKey="ENTUserAccountId", OtherKey="ENTUserAccountId")]
		public EntitySet<ENTRoleUserAccount> ENTRoleUserAccounts
		{
			get
			{
				return this._ENTRoleUserAccounts;
			}
			set
			{
				this._ENTRoleUserAccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_ENTWFOwnerGroupUserAccount", Storage="_ENTWFOwnerGroupUserAccounts", ThisKey="ENTUserAccountId", OtherKey="ENTUserAccountId")]
		public EntitySet<ENTWFOwnerGroupUserAccount> ENTWFOwnerGroupUserAccounts
		{
			get
			{
				return this._ENTWFOwnerGroupUserAccounts;
			}
			set
			{
				this._ENTWFOwnerGroupUserAccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_ENTWFItemOwner", Storage="_ENTWFItemOwners", ThisKey="ENTUserAccountId", OtherKey="ENTUserAccountId")]
		public EntitySet<ENTWFItemOwner> ENTWFItemOwners
		{
			get
			{
				return this._ENTWFItemOwners;
			}
			set
			{
				this._ENTWFItemOwners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_ENTWFItemStateHistory", Storage="_ENTWFItemStateHistories", ThisKey="ENTUserAccountId", OtherKey="ENTUserAccountId")]
		public EntitySet<ENTWFItemStateHistory> ENTWFItemStateHistories
		{
			get
			{
				return this._ENTWFItemStateHistories;
			}
			set
			{
				this._ENTWFItemStateHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_PTORequest", Storage="_PTORequests", ThisKey="ENTUserAccountId", OtherKey="ENTUserAccountId")]
		public EntitySet<PTORequest> PTORequests
		{
			get
			{
				return this._PTORequests;
			}
			set
			{
				this._PTORequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_PTOVacationBank", Storage="_PTOVacationBanks", ThisKey="ENTUserAccountId", OtherKey="ENTUserAccountId")]
		public EntitySet<PTOVacationBank> PTOVacationBanks
		{
			get
			{
				return this._PTOVacationBanks;
			}
			set
			{
				this._PTOVacationBanks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_ENTWFItem", Storage="_ENTWFItems", ThisKey="ENTUserAccountId", OtherKey="SubmitterENTUserAccountId")]
		public EntitySet<ENTWFItem> ENTWFItems
		{
			get
			{
				return this._ENTWFItems;
			}
			set
			{
				this._ENTWFItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_ENTNotificationENTUserAccount", Storage="_ENTNotificationENTUserAccounts", ThisKey="ENTUserAccountId", OtherKey="ENTUserAccountId")]
		public EntitySet<ENTNotificationENTUserAccount> ENTNotificationENTUserAccounts
		{
			get
			{
				return this._ENTNotificationENTUserAccounts;
			}
			set
			{
				this._ENTNotificationENTUserAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ENTRoleUserAccounts(ENTRoleUserAccount entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = this;
		}
		
		private void detach_ENTRoleUserAccounts(ENTRoleUserAccount entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = null;
		}
		
		private void attach_ENTWFOwnerGroupUserAccounts(ENTWFOwnerGroupUserAccount entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = this;
		}
		
		private void detach_ENTWFOwnerGroupUserAccounts(ENTWFOwnerGroupUserAccount entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = null;
		}
		
		private void attach_ENTWFItemOwners(ENTWFItemOwner entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = this;
		}
		
		private void detach_ENTWFItemOwners(ENTWFItemOwner entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = null;
		}
		
		private void attach_ENTWFItemStateHistories(ENTWFItemStateHistory entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = this;
		}
		
		private void detach_ENTWFItemStateHistories(ENTWFItemStateHistory entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = null;
		}
		
		private void attach_PTORequests(PTORequest entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = this;
		}
		
		private void detach_PTORequests(PTORequest entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = null;
		}
		
		private void attach_PTOVacationBanks(PTOVacationBank entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = this;
		}
		
		private void detach_PTOVacationBanks(PTOVacationBank entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = null;
		}
		
		private void attach_ENTWFItems(ENTWFItem entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = this;
		}
		
		private void detach_ENTWFItems(ENTWFItem entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = null;
		}
		
		private void attach_ENTNotificationENTUserAccounts(ENTNotificationENTUserAccount entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = this;
		}
		
		private void detach_ENTNotificationENTUserAccounts(ENTNotificationENTUserAccount entity)
		{
			this.SendPropertyChanging();
			entity.ENTUserAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTMenuItem")]
	public partial class ENTMenuItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTMenuItemId;
		
		private string _MenuItemName;
		
		private string _Description;
		
		private string _Url;
		
		private System.Nullable<int> _ParentENTMenuItemId;
		
		private byte _DisplaySequence;
		
		private bool _IsAlwaysEnabled;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<ENTMenuItem> _ENTMenuItems;
		
		private EntitySet<ENTCapability> _ENTCapabilities;
		
		private EntityRef<ENTMenuItem> _ENTMenuItem1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTMenuItemIdChanging(int value);
    partial void OnENTMenuItemIdChanged();
    partial void OnMenuItemNameChanging(string value);
    partial void OnMenuItemNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnParentENTMenuItemIdChanging(System.Nullable<int> value);
    partial void OnParentENTMenuItemIdChanged();
    partial void OnDisplaySequenceChanging(byte value);
    partial void OnDisplaySequenceChanged();
    partial void OnIsAlwaysEnabledChanging(bool value);
    partial void OnIsAlwaysEnabledChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTMenuItem()
		{
			this._ENTMenuItems = new EntitySet<ENTMenuItem>(new Action<ENTMenuItem>(this.attach_ENTMenuItems), new Action<ENTMenuItem>(this.detach_ENTMenuItems));
			this._ENTCapabilities = new EntitySet<ENTCapability>(new Action<ENTCapability>(this.attach_ENTCapabilities), new Action<ENTCapability>(this.detach_ENTCapabilities));
			this._ENTMenuItem1 = default(EntityRef<ENTMenuItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTMenuItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTMenuItemId
		{
			get
			{
				return this._ENTMenuItemId;
			}
			set
			{
				if ((this._ENTMenuItemId != value))
				{
					this.OnENTMenuItemIdChanging(value);
					this.SendPropertyChanging();
					this._ENTMenuItemId = value;
					this.SendPropertyChanged("ENTMenuItemId");
					this.OnENTMenuItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuItemName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MenuItemName
		{
			get
			{
				return this._MenuItemName;
			}
			set
			{
				if ((this._MenuItemName != value))
				{
					this.OnMenuItemNameChanging(value);
					this.SendPropertyChanging();
					this._MenuItemName = value;
					this.SendPropertyChanged("MenuItemName");
					this.OnMenuItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentENTMenuItemId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentENTMenuItemId
		{
			get
			{
				return this._ParentENTMenuItemId;
			}
			set
			{
				if ((this._ParentENTMenuItemId != value))
				{
					if (this._ENTMenuItem1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentENTMenuItemIdChanging(value);
					this.SendPropertyChanging();
					this._ParentENTMenuItemId = value;
					this.SendPropertyChanged("ParentENTMenuItemId");
					this.OnParentENTMenuItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplaySequence", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte DisplaySequence
		{
			get
			{
				return this._DisplaySequence;
			}
			set
			{
				if ((this._DisplaySequence != value))
				{
					this.OnDisplaySequenceChanging(value);
					this.SendPropertyChanging();
					this._DisplaySequence = value;
					this.SendPropertyChanged("DisplaySequence");
					this.OnDisplaySequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAlwaysEnabled", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsAlwaysEnabled
		{
			get
			{
				return this._IsAlwaysEnabled;
			}
			set
			{
				if ((this._IsAlwaysEnabled != value))
				{
					this.OnIsAlwaysEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsAlwaysEnabled = value;
					this.SendPropertyChanged("IsAlwaysEnabled");
					this.OnIsAlwaysEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTMenuItem_ENTMenuItem", Storage="_ENTMenuItems", ThisKey="ENTMenuItemId", OtherKey="ParentENTMenuItemId")]
		public EntitySet<ENTMenuItem> ENTMenuItems
		{
			get
			{
				return this._ENTMenuItems;
			}
			set
			{
				this._ENTMenuItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTMenuItem_ENTCapability", Storage="_ENTCapabilities", ThisKey="ENTMenuItemId", OtherKey="ENTMenuItemId")]
		public EntitySet<ENTCapability> ENTCapabilities
		{
			get
			{
				return this._ENTCapabilities;
			}
			set
			{
				this._ENTCapabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTMenuItem_ENTMenuItem", Storage="_ENTMenuItem1", ThisKey="ParentENTMenuItemId", OtherKey="ENTMenuItemId", IsForeignKey=true)]
		public ENTMenuItem ENTMenuItem1
		{
			get
			{
				return this._ENTMenuItem1.Entity;
			}
			set
			{
				ENTMenuItem previousValue = this._ENTMenuItem1.Entity;
				if (((previousValue != value) 
							|| (this._ENTMenuItem1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTMenuItem1.Entity = null;
						previousValue.ENTMenuItems.Remove(this);
					}
					this._ENTMenuItem1.Entity = value;
					if ((value != null))
					{
						value.ENTMenuItems.Add(this);
						this._ParentENTMenuItemId = value.ENTMenuItemId;
					}
					else
					{
						this._ParentENTMenuItemId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ENTMenuItem1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ENTMenuItems(ENTMenuItem entity)
		{
			this.SendPropertyChanging();
			entity.ENTMenuItem1 = this;
		}
		
		private void detach_ENTMenuItems(ENTMenuItem entity)
		{
			this.SendPropertyChanging();
			entity.ENTMenuItem1 = null;
		}
		
		private void attach_ENTCapabilities(ENTCapability entity)
		{
			this.SendPropertyChanging();
			entity.ENTMenuItem = this;
		}
		
		private void detach_ENTCapabilities(ENTCapability entity)
		{
			this.SendPropertyChanging();
			entity.ENTMenuItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTRole")]
	public partial class ENTRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTRoleId;
		
		private string _RoleName;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<ENTRoleCapability> _ENTRoleCapabilities;
		
		private EntitySet<ENTRoleUserAccount> _ENTRoleUserAccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTRoleIdChanging(int value);
    partial void OnENTRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTRole()
		{
			this._ENTRoleCapabilities = new EntitySet<ENTRoleCapability>(new Action<ENTRoleCapability>(this.attach_ENTRoleCapabilities), new Action<ENTRoleCapability>(this.detach_ENTRoleCapabilities));
			this._ENTRoleUserAccounts = new EntitySet<ENTRoleUserAccount>(new Action<ENTRoleUserAccount>(this.attach_ENTRoleUserAccounts), new Action<ENTRoleUserAccount>(this.detach_ENTRoleUserAccounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTRoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTRoleId
		{
			get
			{
				return this._ENTRoleId;
			}
			set
			{
				if ((this._ENTRoleId != value))
				{
					this.OnENTRoleIdChanging(value);
					this.SendPropertyChanging();
					this._ENTRoleId = value;
					this.SendPropertyChanged("ENTRoleId");
					this.OnENTRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTRole_ENTRoleCapability", Storage="_ENTRoleCapabilities", ThisKey="ENTRoleId", OtherKey="ENTRoleId")]
		public EntitySet<ENTRoleCapability> ENTRoleCapabilities
		{
			get
			{
				return this._ENTRoleCapabilities;
			}
			set
			{
				this._ENTRoleCapabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTRole_ENTRoleUserAccount", Storage="_ENTRoleUserAccounts", ThisKey="ENTRoleId", OtherKey="ENTRoleId")]
		public EntitySet<ENTRoleUserAccount> ENTRoleUserAccounts
		{
			get
			{
				return this._ENTRoleUserAccounts;
			}
			set
			{
				this._ENTRoleUserAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ENTRoleCapabilities(ENTRoleCapability entity)
		{
			this.SendPropertyChanging();
			entity.ENTRole = this;
		}
		
		private void detach_ENTRoleCapabilities(ENTRoleCapability entity)
		{
			this.SendPropertyChanging();
			entity.ENTRole = null;
		}
		
		private void attach_ENTRoleUserAccounts(ENTRoleUserAccount entity)
		{
			this.SendPropertyChanging();
			entity.ENTRole = this;
		}
		
		private void detach_ENTRoleUserAccounts(ENTRoleUserAccount entity)
		{
			this.SendPropertyChanging();
			entity.ENTRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTRoleCapability")]
	public partial class ENTRoleCapability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTRoleCapabilityId;
		
		private int _ENTRoleId;
		
		private int _ENTCapabilityId;
		
		private byte _AccessFlag;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<ENTRole> _ENTRole;
		
		private EntityRef<ENTCapability> _ENTCapability;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTRoleCapabilityIdChanging(int value);
    partial void OnENTRoleCapabilityIdChanged();
    partial void OnENTRoleIdChanging(int value);
    partial void OnENTRoleIdChanged();
    partial void OnENTCapabilityIdChanging(int value);
    partial void OnENTCapabilityIdChanged();
    partial void OnAccessFlagChanging(byte value);
    partial void OnAccessFlagChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTRoleCapability()
		{
			this._ENTRole = default(EntityRef<ENTRole>);
			this._ENTCapability = default(EntityRef<ENTCapability>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTRoleCapabilityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTRoleCapabilityId
		{
			get
			{
				return this._ENTRoleCapabilityId;
			}
			set
			{
				if ((this._ENTRoleCapabilityId != value))
				{
					this.OnENTRoleCapabilityIdChanging(value);
					this.SendPropertyChanging();
					this._ENTRoleCapabilityId = value;
					this.SendPropertyChanged("ENTRoleCapabilityId");
					this.OnENTRoleCapabilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTRoleId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTRoleId
		{
			get
			{
				return this._ENTRoleId;
			}
			set
			{
				if ((this._ENTRoleId != value))
				{
					if (this._ENTRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTRoleIdChanging(value);
					this.SendPropertyChanging();
					this._ENTRoleId = value;
					this.SendPropertyChanged("ENTRoleId");
					this.OnENTRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTCapabilityId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTCapabilityId
		{
			get
			{
				return this._ENTCapabilityId;
			}
			set
			{
				if ((this._ENTCapabilityId != value))
				{
					if (this._ENTCapability.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTCapabilityIdChanging(value);
					this.SendPropertyChanging();
					this._ENTCapabilityId = value;
					this.SendPropertyChanged("ENTCapabilityId");
					this.OnENTCapabilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFlag", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte AccessFlag
		{
			get
			{
				return this._AccessFlag;
			}
			set
			{
				if ((this._AccessFlag != value))
				{
					this.OnAccessFlagChanging(value);
					this.SendPropertyChanging();
					this._AccessFlag = value;
					this.SendPropertyChanged("AccessFlag");
					this.OnAccessFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTRole_ENTRoleCapability", Storage="_ENTRole", ThisKey="ENTRoleId", OtherKey="ENTRoleId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ENTRole ENTRole
		{
			get
			{
				return this._ENTRole.Entity;
			}
			set
			{
				ENTRole previousValue = this._ENTRole.Entity;
				if (((previousValue != value) 
							|| (this._ENTRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTRole.Entity = null;
						previousValue.ENTRoleCapabilities.Remove(this);
					}
					this._ENTRole.Entity = value;
					if ((value != null))
					{
						value.ENTRoleCapabilities.Add(this);
						this._ENTRoleId = value.ENTRoleId;
					}
					else
					{
						this._ENTRoleId = default(int);
					}
					this.SendPropertyChanged("ENTRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTCapability_ENTRoleCapability", Storage="_ENTCapability", ThisKey="ENTCapabilityId", OtherKey="ENTCapabilityId", IsForeignKey=true)]
		public ENTCapability ENTCapability
		{
			get
			{
				return this._ENTCapability.Entity;
			}
			set
			{
				ENTCapability previousValue = this._ENTCapability.Entity;
				if (((previousValue != value) 
							|| (this._ENTCapability.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTCapability.Entity = null;
						previousValue.ENTRoleCapabilities.Remove(this);
					}
					this._ENTCapability.Entity = value;
					if ((value != null))
					{
						value.ENTRoleCapabilities.Add(this);
						this._ENTCapabilityId = value.ENTCapabilityId;
					}
					else
					{
						this._ENTCapabilityId = default(int);
					}
					this.SendPropertyChanged("ENTCapability");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTRoleUserAccount")]
	public partial class ENTRoleUserAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTRoleUserAccountId;
		
		private int _ENTRoleId;
		
		private int _ENTUserAccountId;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<ENTRole> _ENTRole;
		
		private EntityRef<ENTUserAccount> _ENTUserAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTRoleUserAccountIdChanging(int value);
    partial void OnENTRoleUserAccountIdChanged();
    partial void OnENTRoleIdChanging(int value);
    partial void OnENTRoleIdChanged();
    partial void OnENTUserAccountIdChanging(int value);
    partial void OnENTUserAccountIdChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTRoleUserAccount()
		{
			this._ENTRole = default(EntityRef<ENTRole>);
			this._ENTUserAccount = default(EntityRef<ENTUserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTRoleUserAccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTRoleUserAccountId
		{
			get
			{
				return this._ENTRoleUserAccountId;
			}
			set
			{
				if ((this._ENTRoleUserAccountId != value))
				{
					this.OnENTRoleUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._ENTRoleUserAccountId = value;
					this.SendPropertyChanged("ENTRoleUserAccountId");
					this.OnENTRoleUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTRoleId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTRoleId
		{
			get
			{
				return this._ENTRoleId;
			}
			set
			{
				if ((this._ENTRoleId != value))
				{
					if (this._ENTRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTRoleIdChanging(value);
					this.SendPropertyChanging();
					this._ENTRoleId = value;
					this.SendPropertyChanged("ENTRoleId");
					this.OnENTRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTUserAccountId
		{
			get
			{
				return this._ENTUserAccountId;
			}
			set
			{
				if ((this._ENTUserAccountId != value))
				{
					if (this._ENTUserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._ENTUserAccountId = value;
					this.SendPropertyChanged("ENTUserAccountId");
					this.OnENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTRole_ENTRoleUserAccount", Storage="_ENTRole", ThisKey="ENTRoleId", OtherKey="ENTRoleId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ENTRole ENTRole
		{
			get
			{
				return this._ENTRole.Entity;
			}
			set
			{
				ENTRole previousValue = this._ENTRole.Entity;
				if (((previousValue != value) 
							|| (this._ENTRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTRole.Entity = null;
						previousValue.ENTRoleUserAccounts.Remove(this);
					}
					this._ENTRole.Entity = value;
					if ((value != null))
					{
						value.ENTRoleUserAccounts.Add(this);
						this._ENTRoleId = value.ENTRoleId;
					}
					else
					{
						this._ENTRoleId = default(int);
					}
					this.SendPropertyChanged("ENTRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_ENTRoleUserAccount", Storage="_ENTUserAccount", ThisKey="ENTUserAccountId", OtherKey="ENTUserAccountId", IsForeignKey=true)]
		public ENTUserAccount ENTUserAccount
		{
			get
			{
				return this._ENTUserAccount.Entity;
			}
			set
			{
				ENTUserAccount previousValue = this._ENTUserAccount.Entity;
				if (((previousValue != value) 
							|| (this._ENTUserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTUserAccount.Entity = null;
						previousValue.ENTRoleUserAccounts.Remove(this);
					}
					this._ENTUserAccount.Entity = value;
					if ((value != null))
					{
						value.ENTRoleUserAccounts.Add(this);
						this._ENTUserAccountId = value.ENTUserAccountId;
					}
					else
					{
						this._ENTUserAccountId = default(int);
					}
					this.SendPropertyChanged("ENTUserAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTCapability")]
	public partial class ENTCapability : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTCapabilityId;
		
		private string _CapabilityName;
		
		private System.Nullable<int> _ENTMenuItemId;
		
		private byte _AccessType;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<ENTRoleCapability> _ENTRoleCapabilities;
		
		private EntityRef<ENTMenuItem> _ENTMenuItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTCapabilityIdChanging(int value);
    partial void OnENTCapabilityIdChanged();
    partial void OnCapabilityNameChanging(string value);
    partial void OnCapabilityNameChanged();
    partial void OnENTMenuItemIdChanging(System.Nullable<int> value);
    partial void OnENTMenuItemIdChanged();
    partial void OnAccessTypeChanging(byte value);
    partial void OnAccessTypeChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTCapability()
		{
			this._ENTRoleCapabilities = new EntitySet<ENTRoleCapability>(new Action<ENTRoleCapability>(this.attach_ENTRoleCapabilities), new Action<ENTRoleCapability>(this.detach_ENTRoleCapabilities));
			this._ENTMenuItem = default(EntityRef<ENTMenuItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTCapabilityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTCapabilityId
		{
			get
			{
				return this._ENTCapabilityId;
			}
			set
			{
				if ((this._ENTCapabilityId != value))
				{
					this.OnENTCapabilityIdChanging(value);
					this.SendPropertyChanging();
					this._ENTCapabilityId = value;
					this.SendPropertyChanged("ENTCapabilityId");
					this.OnENTCapabilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapabilityName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CapabilityName
		{
			get
			{
				return this._CapabilityName;
			}
			set
			{
				if ((this._CapabilityName != value))
				{
					this.OnCapabilityNameChanging(value);
					this.SendPropertyChanging();
					this._CapabilityName = value;
					this.SendPropertyChanged("CapabilityName");
					this.OnCapabilityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTMenuItemId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ENTMenuItemId
		{
			get
			{
				return this._ENTMenuItemId;
			}
			set
			{
				if ((this._ENTMenuItemId != value))
				{
					if (this._ENTMenuItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTMenuItemIdChanging(value);
					this.SendPropertyChanging();
					this._ENTMenuItemId = value;
					this.SendPropertyChanged("ENTMenuItemId");
					this.OnENTMenuItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessType", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte AccessType
		{
			get
			{
				return this._AccessType;
			}
			set
			{
				if ((this._AccessType != value))
				{
					this.OnAccessTypeChanging(value);
					this.SendPropertyChanging();
					this._AccessType = value;
					this.SendPropertyChanged("AccessType");
					this.OnAccessTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTCapability_ENTRoleCapability", Storage="_ENTRoleCapabilities", ThisKey="ENTCapabilityId", OtherKey="ENTCapabilityId")]
		public EntitySet<ENTRoleCapability> ENTRoleCapabilities
		{
			get
			{
				return this._ENTRoleCapabilities;
			}
			set
			{
				this._ENTRoleCapabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTMenuItem_ENTCapability", Storage="_ENTMenuItem", ThisKey="ENTMenuItemId", OtherKey="ENTMenuItemId", IsForeignKey=true)]
		public ENTMenuItem ENTMenuItem
		{
			get
			{
				return this._ENTMenuItem.Entity;
			}
			set
			{
				ENTMenuItem previousValue = this._ENTMenuItem.Entity;
				if (((previousValue != value) 
							|| (this._ENTMenuItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTMenuItem.Entity = null;
						previousValue.ENTCapabilities.Remove(this);
					}
					this._ENTMenuItem.Entity = value;
					if ((value != null))
					{
						value.ENTCapabilities.Add(this);
						this._ENTMenuItemId = value.ENTMenuItemId;
					}
					else
					{
						this._ENTMenuItemId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ENTMenuItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ENTRoleCapabilities(ENTRoleCapability entity)
		{
			this.SendPropertyChanging();
			entity.ENTCapability = this;
		}
		
		private void detach_ENTRoleCapabilities(ENTRoleCapability entity)
		{
			this.SendPropertyChanging();
			entity.ENTCapability = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTWFOwnerGroupUserAccount")]
	public partial class ENTWFOwnerGroupUserAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTWFOwnerGroupUserAccountId;
		
		private int _ENTWFOwnerGroupId;
		
		private int _ENTUserAccountId;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<ENTUserAccount> _ENTUserAccount;
		
		private EntityRef<ENTWFOwnerGroup> _ENTWFOwnerGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTWFOwnerGroupUserAccountIdChanging(int value);
    partial void OnENTWFOwnerGroupUserAccountIdChanged();
    partial void OnENTWFOwnerGroupIdChanging(int value);
    partial void OnENTWFOwnerGroupIdChanged();
    partial void OnENTUserAccountIdChanging(int value);
    partial void OnENTUserAccountIdChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTWFOwnerGroupUserAccount()
		{
			this._ENTUserAccount = default(EntityRef<ENTUserAccount>);
			this._ENTWFOwnerGroup = default(EntityRef<ENTWFOwnerGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFOwnerGroupUserAccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTWFOwnerGroupUserAccountId
		{
			get
			{
				return this._ENTWFOwnerGroupUserAccountId;
			}
			set
			{
				if ((this._ENTWFOwnerGroupUserAccountId != value))
				{
					this.OnENTWFOwnerGroupUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFOwnerGroupUserAccountId = value;
					this.SendPropertyChanged("ENTWFOwnerGroupUserAccountId");
					this.OnENTWFOwnerGroupUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFOwnerGroupId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTWFOwnerGroupId
		{
			get
			{
				return this._ENTWFOwnerGroupId;
			}
			set
			{
				if ((this._ENTWFOwnerGroupId != value))
				{
					if (this._ENTWFOwnerGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTWFOwnerGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFOwnerGroupId = value;
					this.SendPropertyChanged("ENTWFOwnerGroupId");
					this.OnENTWFOwnerGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTUserAccountId
		{
			get
			{
				return this._ENTUserAccountId;
			}
			set
			{
				if ((this._ENTUserAccountId != value))
				{
					if (this._ENTUserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._ENTUserAccountId = value;
					this.SendPropertyChanged("ENTUserAccountId");
					this.OnENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_ENTWFOwnerGroupUserAccount", Storage="_ENTUserAccount", ThisKey="ENTUserAccountId", OtherKey="ENTUserAccountId", IsForeignKey=true)]
		public ENTUserAccount ENTUserAccount
		{
			get
			{
				return this._ENTUserAccount.Entity;
			}
			set
			{
				ENTUserAccount previousValue = this._ENTUserAccount.Entity;
				if (((previousValue != value) 
							|| (this._ENTUserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTUserAccount.Entity = null;
						previousValue.ENTWFOwnerGroupUserAccounts.Remove(this);
					}
					this._ENTUserAccount.Entity = value;
					if ((value != null))
					{
						value.ENTWFOwnerGroupUserAccounts.Add(this);
						this._ENTUserAccountId = value.ENTUserAccountId;
					}
					else
					{
						this._ENTUserAccountId = default(int);
					}
					this.SendPropertyChanged("ENTUserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFOwnerGroup_ENTWFOwnerGroupUserAccount", Storage="_ENTWFOwnerGroup", ThisKey="ENTWFOwnerGroupId", OtherKey="ENTWFOwnerGroupId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ENTWFOwnerGroup ENTWFOwnerGroup
		{
			get
			{
				return this._ENTWFOwnerGroup.Entity;
			}
			set
			{
				ENTWFOwnerGroup previousValue = this._ENTWFOwnerGroup.Entity;
				if (((previousValue != value) 
							|| (this._ENTWFOwnerGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTWFOwnerGroup.Entity = null;
						previousValue.ENTWFOwnerGroupUserAccounts.Remove(this);
					}
					this._ENTWFOwnerGroup.Entity = value;
					if ((value != null))
					{
						value.ENTWFOwnerGroupUserAccounts.Add(this);
						this._ENTWFOwnerGroupId = value.ENTWFOwnerGroupId;
					}
					else
					{
						this._ENTWFOwnerGroupId = default(int);
					}
					this.SendPropertyChanged("ENTWFOwnerGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTWFStateProperty")]
	public partial class ENTWFStateProperty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTWFStatePropertyId;
		
		private int _ENTWFStateId;
		
		private string _PropertyName;
		
		private bool _Required;
		
		private bool _ReadOnly;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<ENTWFState> _ENTWFState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTWFStatePropertyIdChanging(int value);
    partial void OnENTWFStatePropertyIdChanged();
    partial void OnENTWFStateIdChanging(int value);
    partial void OnENTWFStateIdChanged();
    partial void OnPropertyNameChanging(string value);
    partial void OnPropertyNameChanged();
    partial void OnRequiredChanging(bool value);
    partial void OnRequiredChanged();
    partial void OnReadOnlyChanging(bool value);
    partial void OnReadOnlyChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTWFStateProperty()
		{
			this._ENTWFState = default(EntityRef<ENTWFState>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFStatePropertyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTWFStatePropertyId
		{
			get
			{
				return this._ENTWFStatePropertyId;
			}
			set
			{
				if ((this._ENTWFStatePropertyId != value))
				{
					this.OnENTWFStatePropertyIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFStatePropertyId = value;
					this.SendPropertyChanged("ENTWFStatePropertyId");
					this.OnENTWFStatePropertyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFStateId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTWFStateId
		{
			get
			{
				return this._ENTWFStateId;
			}
			set
			{
				if ((this._ENTWFStateId != value))
				{
					if (this._ENTWFState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTWFStateIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFStateId = value;
					this.SendPropertyChanged("ENTWFStateId");
					this.OnENTWFStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyName", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PropertyName
		{
			get
			{
				return this._PropertyName;
			}
			set
			{
				if ((this._PropertyName != value))
				{
					this.OnPropertyNameChanging(value);
					this.SendPropertyChanging();
					this._PropertyName = value;
					this.SendPropertyChanged("PropertyName");
					this.OnPropertyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Required", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Required
		{
			get
			{
				return this._Required;
			}
			set
			{
				if ((this._Required != value))
				{
					this.OnRequiredChanging(value);
					this.SendPropertyChanging();
					this._Required = value;
					this.SendPropertyChanged("Required");
					this.OnRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadOnly", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool ReadOnly
		{
			get
			{
				return this._ReadOnly;
			}
			set
			{
				if ((this._ReadOnly != value))
				{
					this.OnReadOnlyChanging(value);
					this.SendPropertyChanging();
					this._ReadOnly = value;
					this.SendPropertyChanged("ReadOnly");
					this.OnReadOnlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFState_ENTWFStateProperty", Storage="_ENTWFState", ThisKey="ENTWFStateId", OtherKey="ENTWFStateId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ENTWFState ENTWFState
		{
			get
			{
				return this._ENTWFState.Entity;
			}
			set
			{
				ENTWFState previousValue = this._ENTWFState.Entity;
				if (((previousValue != value) 
							|| (this._ENTWFState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTWFState.Entity = null;
						previousValue.ENTWFStateProperties.Remove(this);
					}
					this._ENTWFState.Entity = value;
					if ((value != null))
					{
						value.ENTWFStateProperties.Add(this);
						this._ENTWFStateId = value.ENTWFStateId;
					}
					else
					{
						this._ENTWFStateId = default(int);
					}
					this.SendPropertyChanged("ENTWFState");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTWFItemOwner")]
	public partial class ENTWFItemOwner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTWFItemOwnerId;
		
		private int _ENTWFItemId;
		
		private int _ENTWFOwnerGroupId;
		
		private System.Nullable<int> _ENTUserAccountId;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<ENTUserAccount> _ENTUserAccount;
		
		private EntityRef<ENTWFOwnerGroup> _ENTWFOwnerGroup;
		
		private EntityRef<ENTWFItem> _ENTWFItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTWFItemOwnerIdChanging(int value);
    partial void OnENTWFItemOwnerIdChanged();
    partial void OnENTWFItemIdChanging(int value);
    partial void OnENTWFItemIdChanged();
    partial void OnENTWFOwnerGroupIdChanging(int value);
    partial void OnENTWFOwnerGroupIdChanged();
    partial void OnENTUserAccountIdChanging(System.Nullable<int> value);
    partial void OnENTUserAccountIdChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTWFItemOwner()
		{
			this._ENTUserAccount = default(EntityRef<ENTUserAccount>);
			this._ENTWFOwnerGroup = default(EntityRef<ENTWFOwnerGroup>);
			this._ENTWFItem = default(EntityRef<ENTWFItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFItemOwnerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTWFItemOwnerId
		{
			get
			{
				return this._ENTWFItemOwnerId;
			}
			set
			{
				if ((this._ENTWFItemOwnerId != value))
				{
					this.OnENTWFItemOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFItemOwnerId = value;
					this.SendPropertyChanged("ENTWFItemOwnerId");
					this.OnENTWFItemOwnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFItemId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTWFItemId
		{
			get
			{
				return this._ENTWFItemId;
			}
			set
			{
				if ((this._ENTWFItemId != value))
				{
					if (this._ENTWFItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTWFItemIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFItemId = value;
					this.SendPropertyChanged("ENTWFItemId");
					this.OnENTWFItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFOwnerGroupId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTWFOwnerGroupId
		{
			get
			{
				return this._ENTWFOwnerGroupId;
			}
			set
			{
				if ((this._ENTWFOwnerGroupId != value))
				{
					if (this._ENTWFOwnerGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTWFOwnerGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFOwnerGroupId = value;
					this.SendPropertyChanged("ENTWFOwnerGroupId");
					this.OnENTWFOwnerGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTUserAccountId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ENTUserAccountId
		{
			get
			{
				return this._ENTUserAccountId;
			}
			set
			{
				if ((this._ENTUserAccountId != value))
				{
					if (this._ENTUserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._ENTUserAccountId = value;
					this.SendPropertyChanged("ENTUserAccountId");
					this.OnENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_ENTWFItemOwner", Storage="_ENTUserAccount", ThisKey="ENTUserAccountId", OtherKey="ENTUserAccountId", IsForeignKey=true)]
		public ENTUserAccount ENTUserAccount
		{
			get
			{
				return this._ENTUserAccount.Entity;
			}
			set
			{
				ENTUserAccount previousValue = this._ENTUserAccount.Entity;
				if (((previousValue != value) 
							|| (this._ENTUserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTUserAccount.Entity = null;
						previousValue.ENTWFItemOwners.Remove(this);
					}
					this._ENTUserAccount.Entity = value;
					if ((value != null))
					{
						value.ENTWFItemOwners.Add(this);
						this._ENTUserAccountId = value.ENTUserAccountId;
					}
					else
					{
						this._ENTUserAccountId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ENTUserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFOwnerGroup_ENTWFItemOwner", Storage="_ENTWFOwnerGroup", ThisKey="ENTWFOwnerGroupId", OtherKey="ENTWFOwnerGroupId", IsForeignKey=true)]
		public ENTWFOwnerGroup ENTWFOwnerGroup
		{
			get
			{
				return this._ENTWFOwnerGroup.Entity;
			}
			set
			{
				ENTWFOwnerGroup previousValue = this._ENTWFOwnerGroup.Entity;
				if (((previousValue != value) 
							|| (this._ENTWFOwnerGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTWFOwnerGroup.Entity = null;
						previousValue.ENTWFItemOwners.Remove(this);
					}
					this._ENTWFOwnerGroup.Entity = value;
					if ((value != null))
					{
						value.ENTWFItemOwners.Add(this);
						this._ENTWFOwnerGroupId = value.ENTWFOwnerGroupId;
					}
					else
					{
						this._ENTWFOwnerGroupId = default(int);
					}
					this.SendPropertyChanged("ENTWFOwnerGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFItem_ENTWFItemOwner", Storage="_ENTWFItem", ThisKey="ENTWFItemId", OtherKey="ENTWFItemId", IsForeignKey=true)]
		public ENTWFItem ENTWFItem
		{
			get
			{
				return this._ENTWFItem.Entity;
			}
			set
			{
				ENTWFItem previousValue = this._ENTWFItem.Entity;
				if (((previousValue != value) 
							|| (this._ENTWFItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTWFItem.Entity = null;
						previousValue.ENTWFItemOwners.Remove(this);
					}
					this._ENTWFItem.Entity = value;
					if ((value != null))
					{
						value.ENTWFItemOwners.Add(this);
						this._ENTWFItemId = value.ENTWFItemId;
					}
					else
					{
						this._ENTWFItemId = default(int);
					}
					this.SendPropertyChanged("ENTWFItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTWFItemStateHistory")]
	public partial class ENTWFItemStateHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTWFItemStateHistoryId;
		
		private int _ENTWFItemId;
		
		private int _ENTWFStateId;
		
		private int _ENTUserAccountId;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<ENTUserAccount> _ENTUserAccount;
		
		private EntityRef<ENTWFItem> _ENTWFItem;
		
		private EntityRef<ENTWFState> _ENTWFState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTWFItemStateHistoryIdChanging(int value);
    partial void OnENTWFItemStateHistoryIdChanged();
    partial void OnENTWFItemIdChanging(int value);
    partial void OnENTWFItemIdChanged();
    partial void OnENTWFStateIdChanging(int value);
    partial void OnENTWFStateIdChanged();
    partial void OnENTUserAccountIdChanging(int value);
    partial void OnENTUserAccountIdChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTWFItemStateHistory()
		{
			this._ENTUserAccount = default(EntityRef<ENTUserAccount>);
			this._ENTWFItem = default(EntityRef<ENTWFItem>);
			this._ENTWFState = default(EntityRef<ENTWFState>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFItemStateHistoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTWFItemStateHistoryId
		{
			get
			{
				return this._ENTWFItemStateHistoryId;
			}
			set
			{
				if ((this._ENTWFItemStateHistoryId != value))
				{
					this.OnENTWFItemStateHistoryIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFItemStateHistoryId = value;
					this.SendPropertyChanged("ENTWFItemStateHistoryId");
					this.OnENTWFItemStateHistoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFItemId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTWFItemId
		{
			get
			{
				return this._ENTWFItemId;
			}
			set
			{
				if ((this._ENTWFItemId != value))
				{
					if (this._ENTWFItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTWFItemIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFItemId = value;
					this.SendPropertyChanged("ENTWFItemId");
					this.OnENTWFItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFStateId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTWFStateId
		{
			get
			{
				return this._ENTWFStateId;
			}
			set
			{
				if ((this._ENTWFStateId != value))
				{
					if (this._ENTWFState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTWFStateIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFStateId = value;
					this.SendPropertyChanged("ENTWFStateId");
					this.OnENTWFStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTUserAccountId
		{
			get
			{
				return this._ENTUserAccountId;
			}
			set
			{
				if ((this._ENTUserAccountId != value))
				{
					if (this._ENTUserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._ENTUserAccountId = value;
					this.SendPropertyChanged("ENTUserAccountId");
					this.OnENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_ENTWFItemStateHistory", Storage="_ENTUserAccount", ThisKey="ENTUserAccountId", OtherKey="ENTUserAccountId", IsForeignKey=true)]
		public ENTUserAccount ENTUserAccount
		{
			get
			{
				return this._ENTUserAccount.Entity;
			}
			set
			{
				ENTUserAccount previousValue = this._ENTUserAccount.Entity;
				if (((previousValue != value) 
							|| (this._ENTUserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTUserAccount.Entity = null;
						previousValue.ENTWFItemStateHistories.Remove(this);
					}
					this._ENTUserAccount.Entity = value;
					if ((value != null))
					{
						value.ENTWFItemStateHistories.Add(this);
						this._ENTUserAccountId = value.ENTUserAccountId;
					}
					else
					{
						this._ENTUserAccountId = default(int);
					}
					this.SendPropertyChanged("ENTUserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFItem_ENTWFItemStateHistory", Storage="_ENTWFItem", ThisKey="ENTWFItemId", OtherKey="ENTWFItemId", IsForeignKey=true)]
		public ENTWFItem ENTWFItem
		{
			get
			{
				return this._ENTWFItem.Entity;
			}
			set
			{
				ENTWFItem previousValue = this._ENTWFItem.Entity;
				if (((previousValue != value) 
							|| (this._ENTWFItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTWFItem.Entity = null;
						previousValue.ENTWFItemStateHistories.Remove(this);
					}
					this._ENTWFItem.Entity = value;
					if ((value != null))
					{
						value.ENTWFItemStateHistories.Add(this);
						this._ENTWFItemId = value.ENTWFItemId;
					}
					else
					{
						this._ENTWFItemId = default(int);
					}
					this.SendPropertyChanged("ENTWFItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFState_ENTWFItemStateHistory", Storage="_ENTWFState", ThisKey="ENTWFStateId", OtherKey="ENTWFStateId", IsForeignKey=true)]
		public ENTWFState ENTWFState
		{
			get
			{
				return this._ENTWFState.Entity;
			}
			set
			{
				ENTWFState previousValue = this._ENTWFState.Entity;
				if (((previousValue != value) 
							|| (this._ENTWFState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTWFState.Entity = null;
						previousValue.ENTWFItemStateHistories.Remove(this);
					}
					this._ENTWFState.Entity = value;
					if ((value != null))
					{
						value.ENTWFItemStateHistories.Add(this);
						this._ENTWFStateId = value.ENTWFStateId;
					}
					else
					{
						this._ENTWFStateId = default(int);
					}
					this.SendPropertyChanged("ENTWFState");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Holiday")]
	public partial class Holiday : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HolidayId;
		
		private string _HolidayName;
		
		private System.DateTime _HolidayDate;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHolidayIdChanging(int value);
    partial void OnHolidayIdChanged();
    partial void OnHolidayNameChanging(string value);
    partial void OnHolidayNameChanged();
    partial void OnHolidayDateChanging(System.DateTime value);
    partial void OnHolidayDateChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Holiday()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HolidayId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int HolidayId
		{
			get
			{
				return this._HolidayId;
			}
			set
			{
				if ((this._HolidayId != value))
				{
					this.OnHolidayIdChanging(value);
					this.SendPropertyChanging();
					this._HolidayId = value;
					this.SendPropertyChanged("HolidayId");
					this.OnHolidayIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HolidayName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string HolidayName
		{
			get
			{
				return this._HolidayName;
			}
			set
			{
				if ((this._HolidayName != value))
				{
					this.OnHolidayNameChanging(value);
					this.SendPropertyChanging();
					this._HolidayName = value;
					this.SendPropertyChanged("HolidayName");
					this.OnHolidayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HolidayDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime HolidayDate
		{
			get
			{
				return this._HolidayDate;
			}
			set
			{
				if ((this._HolidayDate != value))
				{
					this.OnHolidayDateChanging(value);
					this.SendPropertyChanging();
					this._HolidayDate = value;
					this.SendPropertyChanged("HolidayDate");
					this.OnHolidayDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PTODayType")]
	public partial class PTODayType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PTODayTypeId;
		
		private string _PTODayTypeName;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<PTORequest> _PTORequests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPTODayTypeIdChanging(int value);
    partial void OnPTODayTypeIdChanged();
    partial void OnPTODayTypeNameChanging(string value);
    partial void OnPTODayTypeNameChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public PTODayType()
		{
			this._PTORequests = new EntitySet<PTORequest>(new Action<PTORequest>(this.attach_PTORequests), new Action<PTORequest>(this.detach_PTORequests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTODayTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PTODayTypeId
		{
			get
			{
				return this._PTODayTypeId;
			}
			set
			{
				if ((this._PTODayTypeId != value))
				{
					this.OnPTODayTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PTODayTypeId = value;
					this.SendPropertyChanged("PTODayTypeId");
					this.OnPTODayTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTODayTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PTODayTypeName
		{
			get
			{
				return this._PTODayTypeName;
			}
			set
			{
				if ((this._PTODayTypeName != value))
				{
					this.OnPTODayTypeNameChanging(value);
					this.SendPropertyChanging();
					this._PTODayTypeName = value;
					this.SendPropertyChanged("PTODayTypeName");
					this.OnPTODayTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PTODayType_PTORequest", Storage="_PTORequests", ThisKey="PTODayTypeId", OtherKey="PTODayTypeId")]
		public EntitySet<PTORequest> PTORequests
		{
			get
			{
				return this._PTORequests;
			}
			set
			{
				this._PTORequests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PTORequests(PTORequest entity)
		{
			this.SendPropertyChanging();
			entity.PTODayType = this;
		}
		
		private void detach_PTORequests(PTORequest entity)
		{
			this.SendPropertyChanging();
			entity.PTODayType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PTORequest")]
	public partial class PTORequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PTORequestId;
		
		private int _ENTUserAccountId;
		
		private System.DateTime _RequestDate;
		
		private int _PTODayTypeId;
		
		private int _PTORequestTypeId;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<ENTUserAccount> _ENTUserAccount;
		
		private EntityRef<PTODayType> _PTODayType;
		
		private EntityRef<PTORequestType> _PTORequestType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPTORequestIdChanging(int value);
    partial void OnPTORequestIdChanged();
    partial void OnENTUserAccountIdChanging(int value);
    partial void OnENTUserAccountIdChanged();
    partial void OnRequestDateChanging(System.DateTime value);
    partial void OnRequestDateChanged();
    partial void OnPTODayTypeIdChanging(int value);
    partial void OnPTODayTypeIdChanged();
    partial void OnPTORequestTypeIdChanging(int value);
    partial void OnPTORequestTypeIdChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public PTORequest()
		{
			this._ENTUserAccount = default(EntityRef<ENTUserAccount>);
			this._PTODayType = default(EntityRef<PTODayType>);
			this._PTORequestType = default(EntityRef<PTORequestType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTORequestId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PTORequestId
		{
			get
			{
				return this._PTORequestId;
			}
			set
			{
				if ((this._PTORequestId != value))
				{
					this.OnPTORequestIdChanging(value);
					this.SendPropertyChanging();
					this._PTORequestId = value;
					this.SendPropertyChanged("PTORequestId");
					this.OnPTORequestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTUserAccountId
		{
			get
			{
				return this._ENTUserAccountId;
			}
			set
			{
				if ((this._ENTUserAccountId != value))
				{
					if (this._ENTUserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._ENTUserAccountId = value;
					this.SendPropertyChanged("ENTUserAccountId");
					this.OnENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTODayTypeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PTODayTypeId
		{
			get
			{
				return this._PTODayTypeId;
			}
			set
			{
				if ((this._PTODayTypeId != value))
				{
					if (this._PTODayType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPTODayTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PTODayTypeId = value;
					this.SendPropertyChanged("PTODayTypeId");
					this.OnPTODayTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTORequestTypeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PTORequestTypeId
		{
			get
			{
				return this._PTORequestTypeId;
			}
			set
			{
				if ((this._PTORequestTypeId != value))
				{
					if (this._PTORequestType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPTORequestTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PTORequestTypeId = value;
					this.SendPropertyChanged("PTORequestTypeId");
					this.OnPTORequestTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_PTORequest", Storage="_ENTUserAccount", ThisKey="ENTUserAccountId", OtherKey="ENTUserAccountId", IsForeignKey=true)]
		public ENTUserAccount ENTUserAccount
		{
			get
			{
				return this._ENTUserAccount.Entity;
			}
			set
			{
				ENTUserAccount previousValue = this._ENTUserAccount.Entity;
				if (((previousValue != value) 
							|| (this._ENTUserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTUserAccount.Entity = null;
						previousValue.PTORequests.Remove(this);
					}
					this._ENTUserAccount.Entity = value;
					if ((value != null))
					{
						value.PTORequests.Add(this);
						this._ENTUserAccountId = value.ENTUserAccountId;
					}
					else
					{
						this._ENTUserAccountId = default(int);
					}
					this.SendPropertyChanged("ENTUserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PTODayType_PTORequest", Storage="_PTODayType", ThisKey="PTODayTypeId", OtherKey="PTODayTypeId", IsForeignKey=true)]
		public PTODayType PTODayType
		{
			get
			{
				return this._PTODayType.Entity;
			}
			set
			{
				PTODayType previousValue = this._PTODayType.Entity;
				if (((previousValue != value) 
							|| (this._PTODayType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PTODayType.Entity = null;
						previousValue.PTORequests.Remove(this);
					}
					this._PTODayType.Entity = value;
					if ((value != null))
					{
						value.PTORequests.Add(this);
						this._PTODayTypeId = value.PTODayTypeId;
					}
					else
					{
						this._PTODayTypeId = default(int);
					}
					this.SendPropertyChanged("PTODayType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PTORequestType_PTORequest", Storage="_PTORequestType", ThisKey="PTORequestTypeId", OtherKey="PTORequestTypeId", IsForeignKey=true)]
		public PTORequestType PTORequestType
		{
			get
			{
				return this._PTORequestType.Entity;
			}
			set
			{
				PTORequestType previousValue = this._PTORequestType.Entity;
				if (((previousValue != value) 
							|| (this._PTORequestType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PTORequestType.Entity = null;
						previousValue.PTORequests.Remove(this);
					}
					this._PTORequestType.Entity = value;
					if ((value != null))
					{
						value.PTORequests.Add(this);
						this._PTORequestTypeId = value.PTORequestTypeId;
					}
					else
					{
						this._PTORequestTypeId = default(int);
					}
					this.SendPropertyChanged("PTORequestType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PTORequestType")]
	public partial class PTORequestType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PTORequestTypeId;
		
		private string _PTORequestTypeName;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<PTORequest> _PTORequests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPTORequestTypeIdChanging(int value);
    partial void OnPTORequestTypeIdChanged();
    partial void OnPTORequestTypeNameChanging(string value);
    partial void OnPTORequestTypeNameChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public PTORequestType()
		{
			this._PTORequests = new EntitySet<PTORequest>(new Action<PTORequest>(this.attach_PTORequests), new Action<PTORequest>(this.detach_PTORequests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTORequestTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PTORequestTypeId
		{
			get
			{
				return this._PTORequestTypeId;
			}
			set
			{
				if ((this._PTORequestTypeId != value))
				{
					this.OnPTORequestTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PTORequestTypeId = value;
					this.SendPropertyChanged("PTORequestTypeId");
					this.OnPTORequestTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTORequestTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PTORequestTypeName
		{
			get
			{
				return this._PTORequestTypeName;
			}
			set
			{
				if ((this._PTORequestTypeName != value))
				{
					this.OnPTORequestTypeNameChanging(value);
					this.SendPropertyChanging();
					this._PTORequestTypeName = value;
					this.SendPropertyChanged("PTORequestTypeName");
					this.OnPTORequestTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PTORequestType_PTORequest", Storage="_PTORequests", ThisKey="PTORequestTypeId", OtherKey="PTORequestTypeId")]
		public EntitySet<PTORequest> PTORequests
		{
			get
			{
				return this._PTORequests;
			}
			set
			{
				this._PTORequests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PTORequests(PTORequest entity)
		{
			this.SendPropertyChanging();
			entity.PTORequestType = this;
		}
		
		private void detach_PTORequests(PTORequest entity)
		{
			this.SendPropertyChanging();
			entity.PTORequestType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PTOVacationBank")]
	public partial class PTOVacationBank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PTOVacationBankId;
		
		private int _ENTUserAccountId;
		
		private short _VacationYear;
		
		private byte _PersonalDays;
		
		private byte _VacationDays;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<ENTUserAccount> _ENTUserAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPTOVacationBankIdChanging(int value);
    partial void OnPTOVacationBankIdChanged();
    partial void OnENTUserAccountIdChanging(int value);
    partial void OnENTUserAccountIdChanged();
    partial void OnVacationYearChanging(short value);
    partial void OnVacationYearChanged();
    partial void OnPersonalDaysChanging(byte value);
    partial void OnPersonalDaysChanged();
    partial void OnVacationDaysChanging(byte value);
    partial void OnVacationDaysChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public PTOVacationBank()
		{
			this._ENTUserAccount = default(EntityRef<ENTUserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTOVacationBankId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PTOVacationBankId
		{
			get
			{
				return this._PTOVacationBankId;
			}
			set
			{
				if ((this._PTOVacationBankId != value))
				{
					this.OnPTOVacationBankIdChanging(value);
					this.SendPropertyChanging();
					this._PTOVacationBankId = value;
					this.SendPropertyChanged("PTOVacationBankId");
					this.OnPTOVacationBankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTUserAccountId
		{
			get
			{
				return this._ENTUserAccountId;
			}
			set
			{
				if ((this._ENTUserAccountId != value))
				{
					if (this._ENTUserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._ENTUserAccountId = value;
					this.SendPropertyChanged("ENTUserAccountId");
					this.OnENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VacationYear", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short VacationYear
		{
			get
			{
				return this._VacationYear;
			}
			set
			{
				if ((this._VacationYear != value))
				{
					this.OnVacationYearChanging(value);
					this.SendPropertyChanging();
					this._VacationYear = value;
					this.SendPropertyChanged("VacationYear");
					this.OnVacationYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalDays", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte PersonalDays
		{
			get
			{
				return this._PersonalDays;
			}
			set
			{
				if ((this._PersonalDays != value))
				{
					this.OnPersonalDaysChanging(value);
					this.SendPropertyChanging();
					this._PersonalDays = value;
					this.SendPropertyChanged("PersonalDays");
					this.OnPersonalDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VacationDays", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte VacationDays
		{
			get
			{
				return this._VacationDays;
			}
			set
			{
				if ((this._VacationDays != value))
				{
					this.OnVacationDaysChanging(value);
					this.SendPropertyChanging();
					this._VacationDays = value;
					this.SendPropertyChanged("VacationDays");
					this.OnVacationDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_PTOVacationBank", Storage="_ENTUserAccount", ThisKey="ENTUserAccountId", OtherKey="ENTUserAccountId", IsForeignKey=true)]
		public ENTUserAccount ENTUserAccount
		{
			get
			{
				return this._ENTUserAccount.Entity;
			}
			set
			{
				ENTUserAccount previousValue = this._ENTUserAccount.Entity;
				if (((previousValue != value) 
							|| (this._ENTUserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTUserAccount.Entity = null;
						previousValue.PTOVacationBanks.Remove(this);
					}
					this._ENTUserAccount.Entity = value;
					if ((value != null))
					{
						value.PTOVacationBanks.Add(this);
						this._ENTUserAccountId = value.ENTUserAccountId;
					}
					else
					{
						this._ENTUserAccountId = default(int);
					}
					this.SendPropertyChanged("ENTUserAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTWFOwnerGroup")]
	public partial class ENTWFOwnerGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTWFOwnerGroupId;
		
		private int _ENTWorkflowId;
		
		private string _OwnerGroupName;
		
		private System.Nullable<int> _DefaultENTUserAccountId;
		
		private bool _IsDefaultSameAsLast;
		
		private string _Description;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<ENTWFOwnerGroupUserAccount> _ENTWFOwnerGroupUserAccounts;
		
		private EntitySet<ENTWFItemOwner> _ENTWFItemOwners;
		
		private EntitySet<ENTWFState> _ENTWFStates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTWFOwnerGroupIdChanging(int value);
    partial void OnENTWFOwnerGroupIdChanged();
    partial void OnENTWorkflowIdChanging(int value);
    partial void OnENTWorkflowIdChanged();
    partial void OnOwnerGroupNameChanging(string value);
    partial void OnOwnerGroupNameChanged();
    partial void OnDefaultENTUserAccountIdChanging(System.Nullable<int> value);
    partial void OnDefaultENTUserAccountIdChanged();
    partial void OnIsDefaultSameAsLastChanging(bool value);
    partial void OnIsDefaultSameAsLastChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTWFOwnerGroup()
		{
			this._ENTWFOwnerGroupUserAccounts = new EntitySet<ENTWFOwnerGroupUserAccount>(new Action<ENTWFOwnerGroupUserAccount>(this.attach_ENTWFOwnerGroupUserAccounts), new Action<ENTWFOwnerGroupUserAccount>(this.detach_ENTWFOwnerGroupUserAccounts));
			this._ENTWFItemOwners = new EntitySet<ENTWFItemOwner>(new Action<ENTWFItemOwner>(this.attach_ENTWFItemOwners), new Action<ENTWFItemOwner>(this.detach_ENTWFItemOwners));
			this._ENTWFStates = new EntitySet<ENTWFState>(new Action<ENTWFState>(this.attach_ENTWFStates), new Action<ENTWFState>(this.detach_ENTWFStates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFOwnerGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTWFOwnerGroupId
		{
			get
			{
				return this._ENTWFOwnerGroupId;
			}
			set
			{
				if ((this._ENTWFOwnerGroupId != value))
				{
					this.OnENTWFOwnerGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFOwnerGroupId = value;
					this.SendPropertyChanged("ENTWFOwnerGroupId");
					this.OnENTWFOwnerGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWorkflowId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTWorkflowId
		{
			get
			{
				return this._ENTWorkflowId;
			}
			set
			{
				if ((this._ENTWorkflowId != value))
				{
					this.OnENTWorkflowIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWorkflowId = value;
					this.SendPropertyChanged("ENTWorkflowId");
					this.OnENTWorkflowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerGroupName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OwnerGroupName
		{
			get
			{
				return this._OwnerGroupName;
			}
			set
			{
				if ((this._OwnerGroupName != value))
				{
					this.OnOwnerGroupNameChanging(value);
					this.SendPropertyChanging();
					this._OwnerGroupName = value;
					this.SendPropertyChanged("OwnerGroupName");
					this.OnOwnerGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultENTUserAccountId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DefaultENTUserAccountId
		{
			get
			{
				return this._DefaultENTUserAccountId;
			}
			set
			{
				if ((this._DefaultENTUserAccountId != value))
				{
					this.OnDefaultENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._DefaultENTUserAccountId = value;
					this.SendPropertyChanged("DefaultENTUserAccountId");
					this.OnDefaultENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDefaultSameAsLast", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsDefaultSameAsLast
		{
			get
			{
				return this._IsDefaultSameAsLast;
			}
			set
			{
				if ((this._IsDefaultSameAsLast != value))
				{
					this.OnIsDefaultSameAsLastChanging(value);
					this.SendPropertyChanging();
					this._IsDefaultSameAsLast = value;
					this.SendPropertyChanged("IsDefaultSameAsLast");
					this.OnIsDefaultSameAsLastChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFOwnerGroup_ENTWFOwnerGroupUserAccount", Storage="_ENTWFOwnerGroupUserAccounts", ThisKey="ENTWFOwnerGroupId", OtherKey="ENTWFOwnerGroupId")]
		public EntitySet<ENTWFOwnerGroupUserAccount> ENTWFOwnerGroupUserAccounts
		{
			get
			{
				return this._ENTWFOwnerGroupUserAccounts;
			}
			set
			{
				this._ENTWFOwnerGroupUserAccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFOwnerGroup_ENTWFItemOwner", Storage="_ENTWFItemOwners", ThisKey="ENTWFOwnerGroupId", OtherKey="ENTWFOwnerGroupId")]
		public EntitySet<ENTWFItemOwner> ENTWFItemOwners
		{
			get
			{
				return this._ENTWFItemOwners;
			}
			set
			{
				this._ENTWFItemOwners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFOwnerGroup_ENTWFState", Storage="_ENTWFStates", ThisKey="ENTWFOwnerGroupId", OtherKey="ENTWFOwnerGroupId")]
		public EntitySet<ENTWFState> ENTWFStates
		{
			get
			{
				return this._ENTWFStates;
			}
			set
			{
				this._ENTWFStates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ENTWFOwnerGroupUserAccounts(ENTWFOwnerGroupUserAccount entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFOwnerGroup = this;
		}
		
		private void detach_ENTWFOwnerGroupUserAccounts(ENTWFOwnerGroupUserAccount entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFOwnerGroup = null;
		}
		
		private void attach_ENTWFItemOwners(ENTWFItemOwner entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFOwnerGroup = this;
		}
		
		private void detach_ENTWFItemOwners(ENTWFItemOwner entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFOwnerGroup = null;
		}
		
		private void attach_ENTWFStates(ENTWFState entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFOwnerGroup = this;
		}
		
		private void detach_ENTWFStates(ENTWFState entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFOwnerGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTWFItem")]
	public partial class ENTWFItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTWFItemId;
		
		private int _ENTWorkflowId;
		
		private int _ItemId;
		
		private int _SubmitterENTUserAccountId;
		
		private int _CurrentWFStateId;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<ENTWFItemOwner> _ENTWFItemOwners;
		
		private EntitySet<ENTWFItemStateHistory> _ENTWFItemStateHistories;
		
		private EntityRef<ENTUserAccount> _ENTUserAccount;
		
		private EntityRef<ENTWorkflow> _ENTWorkflow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTWFItemIdChanging(int value);
    partial void OnENTWFItemIdChanged();
    partial void OnENTWorkflowIdChanging(int value);
    partial void OnENTWorkflowIdChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnSubmitterENTUserAccountIdChanging(int value);
    partial void OnSubmitterENTUserAccountIdChanged();
    partial void OnCurrentWFStateIdChanging(int value);
    partial void OnCurrentWFStateIdChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTWFItem()
		{
			this._ENTWFItemOwners = new EntitySet<ENTWFItemOwner>(new Action<ENTWFItemOwner>(this.attach_ENTWFItemOwners), new Action<ENTWFItemOwner>(this.detach_ENTWFItemOwners));
			this._ENTWFItemStateHistories = new EntitySet<ENTWFItemStateHistory>(new Action<ENTWFItemStateHistory>(this.attach_ENTWFItemStateHistories), new Action<ENTWFItemStateHistory>(this.detach_ENTWFItemStateHistories));
			this._ENTUserAccount = default(EntityRef<ENTUserAccount>);
			this._ENTWorkflow = default(EntityRef<ENTWorkflow>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTWFItemId
		{
			get
			{
				return this._ENTWFItemId;
			}
			set
			{
				if ((this._ENTWFItemId != value))
				{
					this.OnENTWFItemIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFItemId = value;
					this.SendPropertyChanged("ENTWFItemId");
					this.OnENTWFItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWorkflowId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTWorkflowId
		{
			get
			{
				return this._ENTWorkflowId;
			}
			set
			{
				if ((this._ENTWorkflowId != value))
				{
					if (this._ENTWorkflow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTWorkflowIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWorkflowId = value;
					this.SendPropertyChanged("ENTWorkflowId");
					this.OnENTWorkflowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitterENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SubmitterENTUserAccountId
		{
			get
			{
				return this._SubmitterENTUserAccountId;
			}
			set
			{
				if ((this._SubmitterENTUserAccountId != value))
				{
					if (this._ENTUserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubmitterENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._SubmitterENTUserAccountId = value;
					this.SendPropertyChanged("SubmitterENTUserAccountId");
					this.OnSubmitterENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentWFStateId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CurrentWFStateId
		{
			get
			{
				return this._CurrentWFStateId;
			}
			set
			{
				if ((this._CurrentWFStateId != value))
				{
					this.OnCurrentWFStateIdChanging(value);
					this.SendPropertyChanging();
					this._CurrentWFStateId = value;
					this.SendPropertyChanged("CurrentWFStateId");
					this.OnCurrentWFStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFItem_ENTWFItemOwner", Storage="_ENTWFItemOwners", ThisKey="ENTWFItemId", OtherKey="ENTWFItemId")]
		public EntitySet<ENTWFItemOwner> ENTWFItemOwners
		{
			get
			{
				return this._ENTWFItemOwners;
			}
			set
			{
				this._ENTWFItemOwners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFItem_ENTWFItemStateHistory", Storage="_ENTWFItemStateHistories", ThisKey="ENTWFItemId", OtherKey="ENTWFItemId")]
		public EntitySet<ENTWFItemStateHistory> ENTWFItemStateHistories
		{
			get
			{
				return this._ENTWFItemStateHistories;
			}
			set
			{
				this._ENTWFItemStateHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_ENTWFItem", Storage="_ENTUserAccount", ThisKey="SubmitterENTUserAccountId", OtherKey="ENTUserAccountId", IsForeignKey=true)]
		public ENTUserAccount ENTUserAccount
		{
			get
			{
				return this._ENTUserAccount.Entity;
			}
			set
			{
				ENTUserAccount previousValue = this._ENTUserAccount.Entity;
				if (((previousValue != value) 
							|| (this._ENTUserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTUserAccount.Entity = null;
						previousValue.ENTWFItems.Remove(this);
					}
					this._ENTUserAccount.Entity = value;
					if ((value != null))
					{
						value.ENTWFItems.Add(this);
						this._SubmitterENTUserAccountId = value.ENTUserAccountId;
					}
					else
					{
						this._SubmitterENTUserAccountId = default(int);
					}
					this.SendPropertyChanged("ENTUserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWorkflow_ENTWFItem", Storage="_ENTWorkflow", ThisKey="ENTWorkflowId", OtherKey="ENTWorkflowId", IsForeignKey=true)]
		public ENTWorkflow ENTWorkflow
		{
			get
			{
				return this._ENTWorkflow.Entity;
			}
			set
			{
				ENTWorkflow previousValue = this._ENTWorkflow.Entity;
				if (((previousValue != value) 
							|| (this._ENTWorkflow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTWorkflow.Entity = null;
						previousValue.ENTWFItems.Remove(this);
					}
					this._ENTWorkflow.Entity = value;
					if ((value != null))
					{
						value.ENTWFItems.Add(this);
						this._ENTWorkflowId = value.ENTWorkflowId;
					}
					else
					{
						this._ENTWorkflowId = default(int);
					}
					this.SendPropertyChanged("ENTWorkflow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ENTWFItemOwners(ENTWFItemOwner entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFItem = this;
		}
		
		private void detach_ENTWFItemOwners(ENTWFItemOwner entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFItem = null;
		}
		
		private void attach_ENTWFItemStateHistories(ENTWFItemStateHistory entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFItem = this;
		}
		
		private void detach_ENTWFItemStateHistories(ENTWFItemStateHistory entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTWFState")]
	public partial class ENTWFState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTWFStateId;
		
		private int _ENTWorkflowId;
		
		private string _StateName;
		
		private string _Description;
		
		private System.Nullable<int> _ENTWFOwnerGroupId;
		
		private bool _IsOwnerSubmitter;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<ENTWFStateProperty> _ENTWFStateProperties;
		
		private EntitySet<ENTWFItemStateHistory> _ENTWFItemStateHistories;
		
		private EntitySet<ENTWFTransition> _ENTWFTransitions;
		
		private EntitySet<ENTWFTransition> _ENTWFTransitions1;
		
		private EntitySet<ENTNotificationENTWFState> _ENTNotificationENTWFStates;
		
		private EntityRef<ENTWFOwnerGroup> _ENTWFOwnerGroup;
		
		private EntityRef<ENTWorkflow> _ENTWorkflow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTWFStateIdChanging(int value);
    partial void OnENTWFStateIdChanged();
    partial void OnENTWorkflowIdChanging(int value);
    partial void OnENTWorkflowIdChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnENTWFOwnerGroupIdChanging(System.Nullable<int> value);
    partial void OnENTWFOwnerGroupIdChanged();
    partial void OnIsOwnerSubmitterChanging(bool value);
    partial void OnIsOwnerSubmitterChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTWFState()
		{
			this._ENTWFStateProperties = new EntitySet<ENTWFStateProperty>(new Action<ENTWFStateProperty>(this.attach_ENTWFStateProperties), new Action<ENTWFStateProperty>(this.detach_ENTWFStateProperties));
			this._ENTWFItemStateHistories = new EntitySet<ENTWFItemStateHistory>(new Action<ENTWFItemStateHistory>(this.attach_ENTWFItemStateHistories), new Action<ENTWFItemStateHistory>(this.detach_ENTWFItemStateHistories));
			this._ENTWFTransitions = new EntitySet<ENTWFTransition>(new Action<ENTWFTransition>(this.attach_ENTWFTransitions), new Action<ENTWFTransition>(this.detach_ENTWFTransitions));
			this._ENTWFTransitions1 = new EntitySet<ENTWFTransition>(new Action<ENTWFTransition>(this.attach_ENTWFTransitions1), new Action<ENTWFTransition>(this.detach_ENTWFTransitions1));
			this._ENTNotificationENTWFStates = new EntitySet<ENTNotificationENTWFState>(new Action<ENTNotificationENTWFState>(this.attach_ENTNotificationENTWFStates), new Action<ENTNotificationENTWFState>(this.detach_ENTNotificationENTWFStates));
			this._ENTWFOwnerGroup = default(EntityRef<ENTWFOwnerGroup>);
			this._ENTWorkflow = default(EntityRef<ENTWorkflow>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFStateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTWFStateId
		{
			get
			{
				return this._ENTWFStateId;
			}
			set
			{
				if ((this._ENTWFStateId != value))
				{
					this.OnENTWFStateIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFStateId = value;
					this.SendPropertyChanged("ENTWFStateId");
					this.OnENTWFStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWorkflowId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTWorkflowId
		{
			get
			{
				return this._ENTWorkflowId;
			}
			set
			{
				if ((this._ENTWorkflowId != value))
				{
					if (this._ENTWorkflow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTWorkflowIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWorkflowId = value;
					this.SendPropertyChanged("ENTWorkflowId");
					this.OnENTWorkflowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFOwnerGroupId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ENTWFOwnerGroupId
		{
			get
			{
				return this._ENTWFOwnerGroupId;
			}
			set
			{
				if ((this._ENTWFOwnerGroupId != value))
				{
					if (this._ENTWFOwnerGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTWFOwnerGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFOwnerGroupId = value;
					this.SendPropertyChanged("ENTWFOwnerGroupId");
					this.OnENTWFOwnerGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOwnerSubmitter", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsOwnerSubmitter
		{
			get
			{
				return this._IsOwnerSubmitter;
			}
			set
			{
				if ((this._IsOwnerSubmitter != value))
				{
					this.OnIsOwnerSubmitterChanging(value);
					this.SendPropertyChanging();
					this._IsOwnerSubmitter = value;
					this.SendPropertyChanged("IsOwnerSubmitter");
					this.OnIsOwnerSubmitterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFState_ENTWFStateProperty", Storage="_ENTWFStateProperties", ThisKey="ENTWFStateId", OtherKey="ENTWFStateId")]
		public EntitySet<ENTWFStateProperty> ENTWFStateProperties
		{
			get
			{
				return this._ENTWFStateProperties;
			}
			set
			{
				this._ENTWFStateProperties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFState_ENTWFItemStateHistory", Storage="_ENTWFItemStateHistories", ThisKey="ENTWFStateId", OtherKey="ENTWFStateId")]
		public EntitySet<ENTWFItemStateHistory> ENTWFItemStateHistories
		{
			get
			{
				return this._ENTWFItemStateHistories;
			}
			set
			{
				this._ENTWFItemStateHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFState_ENTWFTransition", Storage="_ENTWFTransitions", ThisKey="ENTWFStateId", OtherKey="FromENTWFStateId")]
		public EntitySet<ENTWFTransition> ENTWFTransitions
		{
			get
			{
				return this._ENTWFTransitions;
			}
			set
			{
				this._ENTWFTransitions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFState_ENTWFTransition1", Storage="_ENTWFTransitions1", ThisKey="ENTWFStateId", OtherKey="ToENTWFStateId")]
		public EntitySet<ENTWFTransition> ENTWFTransitions1
		{
			get
			{
				return this._ENTWFTransitions1;
			}
			set
			{
				this._ENTWFTransitions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFState_ENTNotificationENTWFState", Storage="_ENTNotificationENTWFStates", ThisKey="ENTWFStateId", OtherKey="ENTWFStateId")]
		public EntitySet<ENTNotificationENTWFState> ENTNotificationENTWFStates
		{
			get
			{
				return this._ENTNotificationENTWFStates;
			}
			set
			{
				this._ENTNotificationENTWFStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFOwnerGroup_ENTWFState", Storage="_ENTWFOwnerGroup", ThisKey="ENTWFOwnerGroupId", OtherKey="ENTWFOwnerGroupId", IsForeignKey=true)]
		public ENTWFOwnerGroup ENTWFOwnerGroup
		{
			get
			{
				return this._ENTWFOwnerGroup.Entity;
			}
			set
			{
				ENTWFOwnerGroup previousValue = this._ENTWFOwnerGroup.Entity;
				if (((previousValue != value) 
							|| (this._ENTWFOwnerGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTWFOwnerGroup.Entity = null;
						previousValue.ENTWFStates.Remove(this);
					}
					this._ENTWFOwnerGroup.Entity = value;
					if ((value != null))
					{
						value.ENTWFStates.Add(this);
						this._ENTWFOwnerGroupId = value.ENTWFOwnerGroupId;
					}
					else
					{
						this._ENTWFOwnerGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ENTWFOwnerGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWorkflow_ENTWFState", Storage="_ENTWorkflow", ThisKey="ENTWorkflowId", OtherKey="ENTWorkflowId", IsForeignKey=true)]
		public ENTWorkflow ENTWorkflow
		{
			get
			{
				return this._ENTWorkflow.Entity;
			}
			set
			{
				ENTWorkflow previousValue = this._ENTWorkflow.Entity;
				if (((previousValue != value) 
							|| (this._ENTWorkflow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTWorkflow.Entity = null;
						previousValue.ENTWFStates.Remove(this);
					}
					this._ENTWorkflow.Entity = value;
					if ((value != null))
					{
						value.ENTWFStates.Add(this);
						this._ENTWorkflowId = value.ENTWorkflowId;
					}
					else
					{
						this._ENTWorkflowId = default(int);
					}
					this.SendPropertyChanged("ENTWorkflow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ENTWFStateProperties(ENTWFStateProperty entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFState = this;
		}
		
		private void detach_ENTWFStateProperties(ENTWFStateProperty entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFState = null;
		}
		
		private void attach_ENTWFItemStateHistories(ENTWFItemStateHistory entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFState = this;
		}
		
		private void detach_ENTWFItemStateHistories(ENTWFItemStateHistory entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFState = null;
		}
		
		private void attach_ENTWFTransitions(ENTWFTransition entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFState = this;
		}
		
		private void detach_ENTWFTransitions(ENTWFTransition entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFState = null;
		}
		
		private void attach_ENTWFTransitions1(ENTWFTransition entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFState1 = this;
		}
		
		private void detach_ENTWFTransitions1(ENTWFTransition entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFState1 = null;
		}
		
		private void attach_ENTNotificationENTWFStates(ENTNotificationENTWFState entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFState = this;
		}
		
		private void detach_ENTNotificationENTWFStates(ENTNotificationENTWFState entity)
		{
			this.SendPropertyChanging();
			entity.ENTWFState = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTWFTransition")]
	public partial class ENTWFTransition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTWFTransitionId;
		
		private int _ENTWorkflowId;
		
		private string _TransitionName;
		
		private System.Nullable<int> _FromENTWFStateId;
		
		private int _ToENTWFStateId;
		
		private string _PostTransitionMethodName;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<ENTWFState> _ENTWFState;
		
		private EntityRef<ENTWFState> _ENTWFState1;
		
		private EntityRef<ENTWorkflow> _ENTWorkflow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTWFTransitionIdChanging(int value);
    partial void OnENTWFTransitionIdChanged();
    partial void OnENTWorkflowIdChanging(int value);
    partial void OnENTWorkflowIdChanged();
    partial void OnTransitionNameChanging(string value);
    partial void OnTransitionNameChanged();
    partial void OnFromENTWFStateIdChanging(System.Nullable<int> value);
    partial void OnFromENTWFStateIdChanged();
    partial void OnToENTWFStateIdChanging(int value);
    partial void OnToENTWFStateIdChanged();
    partial void OnPostTransitionMethodNameChanging(string value);
    partial void OnPostTransitionMethodNameChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTWFTransition()
		{
			this._ENTWFState = default(EntityRef<ENTWFState>);
			this._ENTWFState1 = default(EntityRef<ENTWFState>);
			this._ENTWorkflow = default(EntityRef<ENTWorkflow>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFTransitionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTWFTransitionId
		{
			get
			{
				return this._ENTWFTransitionId;
			}
			set
			{
				if ((this._ENTWFTransitionId != value))
				{
					this.OnENTWFTransitionIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFTransitionId = value;
					this.SendPropertyChanged("ENTWFTransitionId");
					this.OnENTWFTransitionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWorkflowId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTWorkflowId
		{
			get
			{
				return this._ENTWorkflowId;
			}
			set
			{
				if ((this._ENTWorkflowId != value))
				{
					if (this._ENTWorkflow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTWorkflowIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWorkflowId = value;
					this.SendPropertyChanged("ENTWorkflowId");
					this.OnENTWorkflowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransitionName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TransitionName
		{
			get
			{
				return this._TransitionName;
			}
			set
			{
				if ((this._TransitionName != value))
				{
					this.OnTransitionNameChanging(value);
					this.SendPropertyChanging();
					this._TransitionName = value;
					this.SendPropertyChanged("TransitionName");
					this.OnTransitionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromENTWFStateId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> FromENTWFStateId
		{
			get
			{
				return this._FromENTWFStateId;
			}
			set
			{
				if ((this._FromENTWFStateId != value))
				{
					if (this._ENTWFState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromENTWFStateIdChanging(value);
					this.SendPropertyChanging();
					this._FromENTWFStateId = value;
					this.SendPropertyChanged("FromENTWFStateId");
					this.OnFromENTWFStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToENTWFStateId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ToENTWFStateId
		{
			get
			{
				return this._ToENTWFStateId;
			}
			set
			{
				if ((this._ToENTWFStateId != value))
				{
					if (this._ENTWFState1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToENTWFStateIdChanging(value);
					this.SendPropertyChanging();
					this._ToENTWFStateId = value;
					this.SendPropertyChanged("ToENTWFStateId");
					this.OnToENTWFStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostTransitionMethodName", DbType="VarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string PostTransitionMethodName
		{
			get
			{
				return this._PostTransitionMethodName;
			}
			set
			{
				if ((this._PostTransitionMethodName != value))
				{
					this.OnPostTransitionMethodNameChanging(value);
					this.SendPropertyChanging();
					this._PostTransitionMethodName = value;
					this.SendPropertyChanged("PostTransitionMethodName");
					this.OnPostTransitionMethodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFState_ENTWFTransition", Storage="_ENTWFState", ThisKey="FromENTWFStateId", OtherKey="ENTWFStateId", IsForeignKey=true)]
		public ENTWFState ENTWFState
		{
			get
			{
				return this._ENTWFState.Entity;
			}
			set
			{
				ENTWFState previousValue = this._ENTWFState.Entity;
				if (((previousValue != value) 
							|| (this._ENTWFState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTWFState.Entity = null;
						previousValue.ENTWFTransitions.Remove(this);
					}
					this._ENTWFState.Entity = value;
					if ((value != null))
					{
						value.ENTWFTransitions.Add(this);
						this._FromENTWFStateId = value.ENTWFStateId;
					}
					else
					{
						this._FromENTWFStateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ENTWFState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFState_ENTWFTransition1", Storage="_ENTWFState1", ThisKey="ToENTWFStateId", OtherKey="ENTWFStateId", IsForeignKey=true)]
		public ENTWFState ENTWFState1
		{
			get
			{
				return this._ENTWFState1.Entity;
			}
			set
			{
				ENTWFState previousValue = this._ENTWFState1.Entity;
				if (((previousValue != value) 
							|| (this._ENTWFState1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTWFState1.Entity = null;
						previousValue.ENTWFTransitions1.Remove(this);
					}
					this._ENTWFState1.Entity = value;
					if ((value != null))
					{
						value.ENTWFTransitions1.Add(this);
						this._ToENTWFStateId = value.ENTWFStateId;
					}
					else
					{
						this._ToENTWFStateId = default(int);
					}
					this.SendPropertyChanged("ENTWFState1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWorkflow_ENTWFTransition", Storage="_ENTWorkflow", ThisKey="ENTWorkflowId", OtherKey="ENTWorkflowId", IsForeignKey=true)]
		public ENTWorkflow ENTWorkflow
		{
			get
			{
				return this._ENTWorkflow.Entity;
			}
			set
			{
				ENTWorkflow previousValue = this._ENTWorkflow.Entity;
				if (((previousValue != value) 
							|| (this._ENTWorkflow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTWorkflow.Entity = null;
						previousValue.ENTWFTransitions.Remove(this);
					}
					this._ENTWorkflow.Entity = value;
					if ((value != null))
					{
						value.ENTWFTransitions.Add(this);
						this._ENTWorkflowId = value.ENTWorkflowId;
					}
					else
					{
						this._ENTWorkflowId = default(int);
					}
					this.SendPropertyChanged("ENTWorkflow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTEmail")]
	public partial class ENTEmail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTEmailId;
		
		private string _ToEmailAddress;
		
		private string _CCEmailAddress;
		
		private string _BCCEmailAddress;
		
		private string _FromEmailAddress;
		
		private string _Subject;
		
		private string _Body;
		
		private byte _EmailStatusFlag;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTEmailIdChanging(int value);
    partial void OnENTEmailIdChanged();
    partial void OnToEmailAddressChanging(string value);
    partial void OnToEmailAddressChanged();
    partial void OnCCEmailAddressChanging(string value);
    partial void OnCCEmailAddressChanged();
    partial void OnBCCEmailAddressChanging(string value);
    partial void OnBCCEmailAddressChanged();
    partial void OnFromEmailAddressChanging(string value);
    partial void OnFromEmailAddressChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnEmailStatusFlagChanging(byte value);
    partial void OnEmailStatusFlagChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTEmail()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTEmailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTEmailId
		{
			get
			{
				return this._ENTEmailId;
			}
			set
			{
				if ((this._ENTEmailId != value))
				{
					this.OnENTEmailIdChanging(value);
					this.SendPropertyChanging();
					this._ENTEmailId = value;
					this.SendPropertyChanged("ENTEmailId");
					this.OnENTEmailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToEmailAddress", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ToEmailAddress
		{
			get
			{
				return this._ToEmailAddress;
			}
			set
			{
				if ((this._ToEmailAddress != value))
				{
					this.OnToEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._ToEmailAddress = value;
					this.SendPropertyChanged("ToEmailAddress");
					this.OnToEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCEmailAddress", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CCEmailAddress
		{
			get
			{
				return this._CCEmailAddress;
			}
			set
			{
				if ((this._CCEmailAddress != value))
				{
					this.OnCCEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._CCEmailAddress = value;
					this.SendPropertyChanged("CCEmailAddress");
					this.OnCCEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BCCEmailAddress", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string BCCEmailAddress
		{
			get
			{
				return this._BCCEmailAddress;
			}
			set
			{
				if ((this._BCCEmailAddress != value))
				{
					this.OnBCCEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._BCCEmailAddress = value;
					this.SendPropertyChanged("BCCEmailAddress");
					this.OnBCCEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromEmailAddress", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FromEmailAddress
		{
			get
			{
				return this._FromEmailAddress;
			}
			set
			{
				if ((this._FromEmailAddress != value))
				{
					this.OnFromEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._FromEmailAddress = value;
					this.SendPropertyChanged("FromEmailAddress");
					this.OnFromEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailStatusFlag", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte EmailStatusFlag
		{
			get
			{
				return this._EmailStatusFlag;
			}
			set
			{
				if ((this._EmailStatusFlag != value))
				{
					this.OnEmailStatusFlagChanging(value);
					this.SendPropertyChanging();
					this._EmailStatusFlag = value;
					this.SendPropertyChanged("EmailStatusFlag");
					this.OnEmailStatusFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTNotification")]
	public partial class ENTNotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTNotificationId;
		
		private string _Description;
		
		private string _FromEmailAddress;
		
		private string _Subject;
		
		private string _Body;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<ENTNotificationENTUserAccount> _ENTNotificationENTUserAccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTNotificationIdChanging(int value);
    partial void OnENTNotificationIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFromEmailAddressChanging(string value);
    partial void OnFromEmailAddressChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTNotification()
		{
			this._ENTNotificationENTUserAccounts = new EntitySet<ENTNotificationENTUserAccount>(new Action<ENTNotificationENTUserAccount>(this.attach_ENTNotificationENTUserAccounts), new Action<ENTNotificationENTUserAccount>(this.detach_ENTNotificationENTUserAccounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTNotificationId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTNotificationId
		{
			get
			{
				return this._ENTNotificationId;
			}
			set
			{
				if ((this._ENTNotificationId != value))
				{
					this.OnENTNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._ENTNotificationId = value;
					this.SendPropertyChanged("ENTNotificationId");
					this.OnENTNotificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromEmailAddress", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FromEmailAddress
		{
			get
			{
				return this._FromEmailAddress;
			}
			set
			{
				if ((this._FromEmailAddress != value))
				{
					this.OnFromEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._FromEmailAddress = value;
					this.SendPropertyChanged("FromEmailAddress");
					this.OnFromEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTNotification_ENTNotificationENTUserAccount", Storage="_ENTNotificationENTUserAccounts", ThisKey="ENTNotificationId", OtherKey="ENTNotificationId")]
		public EntitySet<ENTNotificationENTUserAccount> ENTNotificationENTUserAccounts
		{
			get
			{
				return this._ENTNotificationENTUserAccounts;
			}
			set
			{
				this._ENTNotificationENTUserAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ENTNotificationENTUserAccounts(ENTNotificationENTUserAccount entity)
		{
			this.SendPropertyChanging();
			entity.ENTNotification = this;
		}
		
		private void detach_ENTNotificationENTUserAccounts(ENTNotificationENTUserAccount entity)
		{
			this.SendPropertyChanging();
			entity.ENTNotification = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTNotificationENTUserAccount")]
	public partial class ENTNotificationENTUserAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTNotificationENTUserAccountId;
		
		private int _ENTNotificationId;
		
		private int _ENTUserAccountId;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<ENTNotificationENTWFState> _ENTNotificationENTWFStates;
		
		private EntityRef<ENTNotification> _ENTNotification;
		
		private EntityRef<ENTUserAccount> _ENTUserAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTNotificationENTUserAccountIdChanging(int value);
    partial void OnENTNotificationENTUserAccountIdChanged();
    partial void OnENTNotificationIdChanging(int value);
    partial void OnENTNotificationIdChanged();
    partial void OnENTUserAccountIdChanging(int value);
    partial void OnENTUserAccountIdChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTNotificationENTUserAccount()
		{
			this._ENTNotificationENTWFStates = new EntitySet<ENTNotificationENTWFState>(new Action<ENTNotificationENTWFState>(this.attach_ENTNotificationENTWFStates), new Action<ENTNotificationENTWFState>(this.detach_ENTNotificationENTWFStates));
			this._ENTNotification = default(EntityRef<ENTNotification>);
			this._ENTUserAccount = default(EntityRef<ENTUserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTNotificationENTUserAccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTNotificationENTUserAccountId
		{
			get
			{
				return this._ENTNotificationENTUserAccountId;
			}
			set
			{
				if ((this._ENTNotificationENTUserAccountId != value))
				{
					this.OnENTNotificationENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._ENTNotificationENTUserAccountId = value;
					this.SendPropertyChanged("ENTNotificationENTUserAccountId");
					this.OnENTNotificationENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTNotificationId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTNotificationId
		{
			get
			{
				return this._ENTNotificationId;
			}
			set
			{
				if ((this._ENTNotificationId != value))
				{
					if (this._ENTNotification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._ENTNotificationId = value;
					this.SendPropertyChanged("ENTNotificationId");
					this.OnENTNotificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTUserAccountId
		{
			get
			{
				return this._ENTUserAccountId;
			}
			set
			{
				if ((this._ENTUserAccountId != value))
				{
					if (this._ENTUserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._ENTUserAccountId = value;
					this.SendPropertyChanged("ENTUserAccountId");
					this.OnENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTNotificationENTUserAccount_ENTNotificationENTWFState", Storage="_ENTNotificationENTWFStates", ThisKey="ENTNotificationENTUserAccountId", OtherKey="ENTNotificationENTUserAccountId")]
		public EntitySet<ENTNotificationENTWFState> ENTNotificationENTWFStates
		{
			get
			{
				return this._ENTNotificationENTWFStates;
			}
			set
			{
				this._ENTNotificationENTWFStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTNotification_ENTNotificationENTUserAccount", Storage="_ENTNotification", ThisKey="ENTNotificationId", OtherKey="ENTNotificationId", IsForeignKey=true)]
		public ENTNotification ENTNotification
		{
			get
			{
				return this._ENTNotification.Entity;
			}
			set
			{
				ENTNotification previousValue = this._ENTNotification.Entity;
				if (((previousValue != value) 
							|| (this._ENTNotification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTNotification.Entity = null;
						previousValue.ENTNotificationENTUserAccounts.Remove(this);
					}
					this._ENTNotification.Entity = value;
					if ((value != null))
					{
						value.ENTNotificationENTUserAccounts.Add(this);
						this._ENTNotificationId = value.ENTNotificationId;
					}
					else
					{
						this._ENTNotificationId = default(int);
					}
					this.SendPropertyChanged("ENTNotification");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTUserAccount_ENTNotificationENTUserAccount", Storage="_ENTUserAccount", ThisKey="ENTUserAccountId", OtherKey="ENTUserAccountId", IsForeignKey=true)]
		public ENTUserAccount ENTUserAccount
		{
			get
			{
				return this._ENTUserAccount.Entity;
			}
			set
			{
				ENTUserAccount previousValue = this._ENTUserAccount.Entity;
				if (((previousValue != value) 
							|| (this._ENTUserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTUserAccount.Entity = null;
						previousValue.ENTNotificationENTUserAccounts.Remove(this);
					}
					this._ENTUserAccount.Entity = value;
					if ((value != null))
					{
						value.ENTNotificationENTUserAccounts.Add(this);
						this._ENTUserAccountId = value.ENTUserAccountId;
					}
					else
					{
						this._ENTUserAccountId = default(int);
					}
					this.SendPropertyChanged("ENTUserAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ENTNotificationENTWFStates(ENTNotificationENTWFState entity)
		{
			this.SendPropertyChanging();
			entity.ENTNotificationENTUserAccount = this;
		}
		
		private void detach_ENTNotificationENTWFStates(ENTNotificationENTWFState entity)
		{
			this.SendPropertyChanging();
			entity.ENTNotificationENTUserAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTNotificationENTWFState")]
	public partial class ENTNotificationENTWFState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTNotificationENTWFStateId;
		
		private int _ENTNotificationENTUserAccountId;
		
		private int _ENTWFStateId;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<ENTNotificationENTUserAccount> _ENTNotificationENTUserAccount;
		
		private EntityRef<ENTWFState> _ENTWFState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTNotificationENTWFStateIdChanging(int value);
    partial void OnENTNotificationENTWFStateIdChanged();
    partial void OnENTNotificationENTUserAccountIdChanging(int value);
    partial void OnENTNotificationENTUserAccountIdChanged();
    partial void OnENTWFStateIdChanging(int value);
    partial void OnENTWFStateIdChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTNotificationENTWFState()
		{
			this._ENTNotificationENTUserAccount = default(EntityRef<ENTNotificationENTUserAccount>);
			this._ENTWFState = default(EntityRef<ENTWFState>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTNotificationENTWFStateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTNotificationENTWFStateId
		{
			get
			{
				return this._ENTNotificationENTWFStateId;
			}
			set
			{
				if ((this._ENTNotificationENTWFStateId != value))
				{
					this.OnENTNotificationENTWFStateIdChanging(value);
					this.SendPropertyChanging();
					this._ENTNotificationENTWFStateId = value;
					this.SendPropertyChanged("ENTNotificationENTWFStateId");
					this.OnENTNotificationENTWFStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTNotificationENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTNotificationENTUserAccountId
		{
			get
			{
				return this._ENTNotificationENTUserAccountId;
			}
			set
			{
				if ((this._ENTNotificationENTUserAccountId != value))
				{
					if (this._ENTNotificationENTUserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTNotificationENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._ENTNotificationENTUserAccountId = value;
					this.SendPropertyChanged("ENTNotificationENTUserAccountId");
					this.OnENTNotificationENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWFStateId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTWFStateId
		{
			get
			{
				return this._ENTWFStateId;
			}
			set
			{
				if ((this._ENTWFStateId != value))
				{
					if (this._ENTWFState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTWFStateIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWFStateId = value;
					this.SendPropertyChanged("ENTWFStateId");
					this.OnENTWFStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTNotificationENTUserAccount_ENTNotificationENTWFState", Storage="_ENTNotificationENTUserAccount", ThisKey="ENTNotificationENTUserAccountId", OtherKey="ENTNotificationENTUserAccountId", IsForeignKey=true)]
		public ENTNotificationENTUserAccount ENTNotificationENTUserAccount
		{
			get
			{
				return this._ENTNotificationENTUserAccount.Entity;
			}
			set
			{
				ENTNotificationENTUserAccount previousValue = this._ENTNotificationENTUserAccount.Entity;
				if (((previousValue != value) 
							|| (this._ENTNotificationENTUserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTNotificationENTUserAccount.Entity = null;
						previousValue.ENTNotificationENTWFStates.Remove(this);
					}
					this._ENTNotificationENTUserAccount.Entity = value;
					if ((value != null))
					{
						value.ENTNotificationENTWFStates.Add(this);
						this._ENTNotificationENTUserAccountId = value.ENTNotificationENTUserAccountId;
					}
					else
					{
						this._ENTNotificationENTUserAccountId = default(int);
					}
					this.SendPropertyChanged("ENTNotificationENTUserAccount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWFState_ENTNotificationENTWFState", Storage="_ENTWFState", ThisKey="ENTWFStateId", OtherKey="ENTWFStateId", IsForeignKey=true)]
		public ENTWFState ENTWFState
		{
			get
			{
				return this._ENTWFState.Entity;
			}
			set
			{
				ENTWFState previousValue = this._ENTWFState.Entity;
				if (((previousValue != value) 
							|| (this._ENTWFState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTWFState.Entity = null;
						previousValue.ENTNotificationENTWFStates.Remove(this);
					}
					this._ENTWFState.Entity = value;
					if ((value != null))
					{
						value.ENTNotificationENTWFStates.Add(this);
						this._ENTWFStateId = value.ENTWFStateId;
					}
					else
					{
						this._ENTWFStateId = default(int);
					}
					this.SendPropertyChanged("ENTWFState");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTWorkflow")]
	public partial class ENTWorkflow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTWorkflowId;
		
		private string _WorkflowName;
		
		private string _ENTWorkflowObjectName;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<ENTWFItem> _ENTWFItems;
		
		private EntitySet<ENTWFState> _ENTWFStates;
		
		private EntitySet<ENTWFTransition> _ENTWFTransitions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTWorkflowIdChanging(int value);
    partial void OnENTWorkflowIdChanged();
    partial void OnWorkflowNameChanging(string value);
    partial void OnWorkflowNameChanged();
    partial void OnENTWorkflowObjectNameChanging(string value);
    partial void OnENTWorkflowObjectNameChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTWorkflow()
		{
			this._ENTWFItems = new EntitySet<ENTWFItem>(new Action<ENTWFItem>(this.attach_ENTWFItems), new Action<ENTWFItem>(this.detach_ENTWFItems));
			this._ENTWFStates = new EntitySet<ENTWFState>(new Action<ENTWFState>(this.attach_ENTWFStates), new Action<ENTWFState>(this.detach_ENTWFStates));
			this._ENTWFTransitions = new EntitySet<ENTWFTransition>(new Action<ENTWFTransition>(this.attach_ENTWFTransitions), new Action<ENTWFTransition>(this.detach_ENTWFTransitions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWorkflowId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTWorkflowId
		{
			get
			{
				return this._ENTWorkflowId;
			}
			set
			{
				if ((this._ENTWorkflowId != value))
				{
					this.OnENTWorkflowIdChanging(value);
					this.SendPropertyChanging();
					this._ENTWorkflowId = value;
					this.SendPropertyChanged("ENTWorkflowId");
					this.OnENTWorkflowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkflowName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string WorkflowName
		{
			get
			{
				return this._WorkflowName;
			}
			set
			{
				if ((this._WorkflowName != value))
				{
					this.OnWorkflowNameChanging(value);
					this.SendPropertyChanging();
					this._WorkflowName = value;
					this.SendPropertyChanged("WorkflowName");
					this.OnWorkflowNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTWorkflowObjectName", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ENTWorkflowObjectName
		{
			get
			{
				return this._ENTWorkflowObjectName;
			}
			set
			{
				if ((this._ENTWorkflowObjectName != value))
				{
					this.OnENTWorkflowObjectNameChanging(value);
					this.SendPropertyChanging();
					this._ENTWorkflowObjectName = value;
					this.SendPropertyChanged("ENTWorkflowObjectName");
					this.OnENTWorkflowObjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWorkflow_ENTWFItem", Storage="_ENTWFItems", ThisKey="ENTWorkflowId", OtherKey="ENTWorkflowId")]
		public EntitySet<ENTWFItem> ENTWFItems
		{
			get
			{
				return this._ENTWFItems;
			}
			set
			{
				this._ENTWFItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWorkflow_ENTWFState", Storage="_ENTWFStates", ThisKey="ENTWorkflowId", OtherKey="ENTWorkflowId")]
		public EntitySet<ENTWFState> ENTWFStates
		{
			get
			{
				return this._ENTWFStates;
			}
			set
			{
				this._ENTWFStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTWorkflow_ENTWFTransition", Storage="_ENTWFTransitions", ThisKey="ENTWorkflowId", OtherKey="ENTWorkflowId")]
		public EntitySet<ENTWFTransition> ENTWFTransitions
		{
			get
			{
				return this._ENTWFTransitions;
			}
			set
			{
				this._ENTWFTransitions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ENTWFItems(ENTWFItem entity)
		{
			this.SendPropertyChanging();
			entity.ENTWorkflow = this;
		}
		
		private void detach_ENTWFItems(ENTWFItem entity)
		{
			this.SendPropertyChanging();
			entity.ENTWorkflow = null;
		}
		
		private void attach_ENTWFStates(ENTWFState entity)
		{
			this.SendPropertyChanging();
			entity.ENTWorkflow = this;
		}
		
		private void detach_ENTWFStates(ENTWFState entity)
		{
			this.SendPropertyChanging();
			entity.ENTWorkflow = null;
		}
		
		private void attach_ENTWFTransitions(ENTWFTransition entity)
		{
			this.SendPropertyChanging();
			entity.ENTWorkflow = this;
		}
		
		private void detach_ENTWFTransitions(ENTWFTransition entity)
		{
			this.SendPropertyChanging();
			entity.ENTWorkflow = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTReport")]
	public partial class ENTReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTReportId;
		
		private string _ReportName;
		
		private string _FileName;
		
		private string _ObjectName;
		
		private string _Description;
		
		private string _SubReportObjectName;
		
		private string _SubReportMethodName;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTReportIdChanging(int value);
    partial void OnENTReportIdChanged();
    partial void OnReportNameChanging(string value);
    partial void OnReportNameChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnObjectNameChanging(string value);
    partial void OnObjectNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSubReportObjectNameChanging(string value);
    partial void OnSubReportObjectNameChanged();
    partial void OnSubReportMethodNameChanging(string value);
    partial void OnSubReportMethodNameChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTReport()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTReportId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTReportId
		{
			get
			{
				return this._ENTReportId;
			}
			set
			{
				if ((this._ENTReportId != value))
				{
					this.OnENTReportIdChanging(value);
					this.SendPropertyChanging();
					this._ENTReportId = value;
					this.SendPropertyChanged("ENTReportId");
					this.OnENTReportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ReportName
		{
			get
			{
				return this._ReportName;
			}
			set
			{
				if ((this._ReportName != value))
				{
					this.OnReportNameChanging(value);
					this.SendPropertyChanging();
					this._ReportName = value;
					this.SendPropertyChanged("ReportName");
					this.OnReportNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectName", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectName
		{
			get
			{
				return this._ObjectName;
			}
			set
			{
				if ((this._ObjectName != value))
				{
					this.OnObjectNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectName = value;
					this.SendPropertyChanged("ObjectName");
					this.OnObjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubReportObjectName", DbType="VarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string SubReportObjectName
		{
			get
			{
				return this._SubReportObjectName;
			}
			set
			{
				if ((this._SubReportObjectName != value))
				{
					this.OnSubReportObjectNameChanging(value);
					this.SendPropertyChanging();
					this._SubReportObjectName = value;
					this.SendPropertyChanged("SubReportObjectName");
					this.OnSubReportObjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubReportMethodName", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string SubReportMethodName
		{
			get
			{
				return this._SubReportMethodName;
			}
			set
			{
				if ((this._SubReportMethodName != value))
				{
					this.OnSubReportMethodNameChanging(value);
					this.SendPropertyChanging();
					this._SubReportMethodName = value;
					this.SendPropertyChanged("SubReportMethodName");
					this.OnSubReportMethodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTAuditObjectProperty")]
	public partial class ENTAuditObjectProperty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTAuditObjectPropertyId;
		
		private int _ENTAuditObjectId;
		
		private string _PropertyName;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<ENTAuditObject> _ENTAuditObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTAuditObjectPropertyIdChanging(int value);
    partial void OnENTAuditObjectPropertyIdChanged();
    partial void OnENTAuditObjectIdChanging(int value);
    partial void OnENTAuditObjectIdChanged();
    partial void OnPropertyNameChanging(string value);
    partial void OnPropertyNameChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTAuditObjectProperty()
		{
			this._ENTAuditObject = default(EntityRef<ENTAuditObject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTAuditObjectPropertyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTAuditObjectPropertyId
		{
			get
			{
				return this._ENTAuditObjectPropertyId;
			}
			set
			{
				if ((this._ENTAuditObjectPropertyId != value))
				{
					this.OnENTAuditObjectPropertyIdChanging(value);
					this.SendPropertyChanging();
					this._ENTAuditObjectPropertyId = value;
					this.SendPropertyChanged("ENTAuditObjectPropertyId");
					this.OnENTAuditObjectPropertyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTAuditObjectId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ENTAuditObjectId
		{
			get
			{
				return this._ENTAuditObjectId;
			}
			set
			{
				if ((this._ENTAuditObjectId != value))
				{
					if (this._ENTAuditObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnENTAuditObjectIdChanging(value);
					this.SendPropertyChanging();
					this._ENTAuditObjectId = value;
					this.SendPropertyChanged("ENTAuditObjectId");
					this.OnENTAuditObjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyName", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PropertyName
		{
			get
			{
				return this._PropertyName;
			}
			set
			{
				if ((this._PropertyName != value))
				{
					this.OnPropertyNameChanging(value);
					this.SendPropertyChanging();
					this._PropertyName = value;
					this.SendPropertyChanged("PropertyName");
					this.OnPropertyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTAuditObject_ENTAuditObjectProperty", Storage="_ENTAuditObject", ThisKey="ENTAuditObjectId", OtherKey="ENTAuditObjectId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ENTAuditObject ENTAuditObject
		{
			get
			{
				return this._ENTAuditObject.Entity;
			}
			set
			{
				ENTAuditObject previousValue = this._ENTAuditObject.Entity;
				if (((previousValue != value) 
							|| (this._ENTAuditObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ENTAuditObject.Entity = null;
						previousValue.ENTAuditObjectProperties.Remove(this);
					}
					this._ENTAuditObject.Entity = value;
					if ((value != null))
					{
						value.ENTAuditObjectProperties.Add(this);
						this._ENTAuditObjectId = value.ENTAuditObjectId;
					}
					else
					{
						this._ENTAuditObjectId = default(int);
					}
					this.SendPropertyChanged("ENTAuditObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTAudit")]
	public partial class ENTAudit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTAuditId;
		
		private string _ObjectName;
		
		private int _RecordId;
		
		private string _PropertyName;
		
		private string _OldValue;
		
		private string _NewValue;
		
		private byte _AuditType;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTAuditIdChanging(int value);
    partial void OnENTAuditIdChanged();
    partial void OnObjectNameChanging(string value);
    partial void OnObjectNameChanged();
    partial void OnRecordIdChanging(int value);
    partial void OnRecordIdChanged();
    partial void OnPropertyNameChanging(string value);
    partial void OnPropertyNameChanged();
    partial void OnOldValueChanging(string value);
    partial void OnOldValueChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    partial void OnAuditTypeChanging(byte value);
    partial void OnAuditTypeChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTAudit()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTAuditId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTAuditId
		{
			get
			{
				return this._ENTAuditId;
			}
			set
			{
				if ((this._ENTAuditId != value))
				{
					this.OnENTAuditIdChanging(value);
					this.SendPropertyChanging();
					this._ENTAuditId = value;
					this.SendPropertyChanged("ENTAuditId");
					this.OnENTAuditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectName", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectName
		{
			get
			{
				return this._ObjectName;
			}
			set
			{
				if ((this._ObjectName != value))
				{
					this.OnObjectNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectName = value;
					this.SendPropertyChanged("ObjectName");
					this.OnObjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this.OnRecordIdChanging(value);
					this.SendPropertyChanging();
					this._RecordId = value;
					this.SendPropertyChanged("RecordId");
					this.OnRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyName", DbType="VarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string PropertyName
		{
			get
			{
				return this._PropertyName;
			}
			set
			{
				if ((this._PropertyName != value))
				{
					this.OnPropertyNameChanging(value);
					this.SendPropertyChanging();
					this._PropertyName = value;
					this.SendPropertyChanged("PropertyName");
					this.OnPropertyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldValue", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this.OnOldValueChanging(value);
					this.SendPropertyChanging();
					this._OldValue = value;
					this.SendPropertyChanged("OldValue");
					this.OnOldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewValue", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditType", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte AuditType
		{
			get
			{
				return this._AuditType;
			}
			set
			{
				if ((this._AuditType != value))
				{
					this.OnAuditTypeChanging(value);
					this.SendPropertyChanging();
					this._AuditType = value;
					this.SendPropertyChanged("AuditType");
					this.OnAuditTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ENTAuditObject")]
	public partial class ENTAuditObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ENTAuditObjectId;
		
		private string _ObjectName;
		
		private string _ObjectFullyQualifiedName;
		
		private System.DateTime _InsertDate;
		
		private int _InsertENTUserAccountId;
		
		private System.DateTime _UpdateDate;
		
		private int _UpdateENTUserAccountId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<ENTAuditObjectProperty> _ENTAuditObjectProperties;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnENTAuditObjectIdChanging(int value);
    partial void OnENTAuditObjectIdChanged();
    partial void OnObjectNameChanging(string value);
    partial void OnObjectNameChanged();
    partial void OnObjectFullyQualifiedNameChanging(string value);
    partial void OnObjectFullyQualifiedNameChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnInsertENTUserAccountIdChanging(int value);
    partial void OnInsertENTUserAccountIdChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateENTUserAccountIdChanging(int value);
    partial void OnUpdateENTUserAccountIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ENTAuditObject()
		{
			this._ENTAuditObjectProperties = new EntitySet<ENTAuditObjectProperty>(new Action<ENTAuditObjectProperty>(this.attach_ENTAuditObjectProperties), new Action<ENTAuditObjectProperty>(this.detach_ENTAuditObjectProperties));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTAuditObjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ENTAuditObjectId
		{
			get
			{
				return this._ENTAuditObjectId;
			}
			set
			{
				if ((this._ENTAuditObjectId != value))
				{
					this.OnENTAuditObjectIdChanging(value);
					this.SendPropertyChanging();
					this._ENTAuditObjectId = value;
					this.SendPropertyChanged("ENTAuditObjectId");
					this.OnENTAuditObjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectName", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectName
		{
			get
			{
				return this._ObjectName;
			}
			set
			{
				if ((this._ObjectName != value))
				{
					this.OnObjectNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectName = value;
					this.SendPropertyChanged("ObjectName");
					this.OnObjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectFullyQualifiedName", DbType="VarChar(255) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectFullyQualifiedName
		{
			get
			{
				return this._ObjectFullyQualifiedName;
			}
			set
			{
				if ((this._ObjectFullyQualifiedName != value))
				{
					this.OnObjectFullyQualifiedNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectFullyQualifiedName = value;
					this.SendPropertyChanged("ObjectFullyQualifiedName");
					this.OnObjectFullyQualifiedNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int InsertENTUserAccountId
		{
			get
			{
				return this._InsertENTUserAccountId;
			}
			set
			{
				if ((this._InsertENTUserAccountId != value))
				{
					this.OnInsertENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._InsertENTUserAccountId = value;
					this.SendPropertyChanged("InsertENTUserAccountId");
					this.OnInsertENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateENTUserAccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UpdateENTUserAccountId
		{
			get
			{
				return this._UpdateENTUserAccountId;
			}
			set
			{
				if ((this._UpdateENTUserAccountId != value))
				{
					this.OnUpdateENTUserAccountIdChanging(value);
					this.SendPropertyChanging();
					this._UpdateENTUserAccountId = value;
					this.SendPropertyChanged("UpdateENTUserAccountId");
					this.OnUpdateENTUserAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ENTAuditObject_ENTAuditObjectProperty", Storage="_ENTAuditObjectProperties", ThisKey="ENTAuditObjectId", OtherKey="ENTAuditObjectId")]
		public EntitySet<ENTAuditObjectProperty> ENTAuditObjectProperties
		{
			get
			{
				return this._ENTAuditObjectProperties;
			}
			set
			{
				this._ENTAuditObjectProperties.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ENTAuditObjectProperties(ENTAuditObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.ENTAuditObject = this;
		}
		
		private void detach_ENTAuditObjectProperties(ENTAuditObjectProperty entity)
		{
			this.SendPropertyChanging();
			entity.ENTAuditObject = null;
		}
	}
	
	public partial class ENTWFOwnerGroupSelectCountByNameWorkflowIdResult
	{
		
		private System.Nullable<int> _CountOfNames;
		
		public ENTWFOwnerGroupSelectCountByNameWorkflowIdResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountOfNames", DbType="Int")]
		public System.Nullable<int> CountOfNames
		{
			get
			{
				return this._CountOfNames;
			}
			set
			{
				if ((this._CountOfNames != value))
				{
					this._CountOfNames = value;
				}
			}
		}
	}
	
	public partial class ENTWFStateSelectCountByENTWFOwnerGroupIdResult
	{
		
		private System.Nullable<int> _CountOfStates;
		
		public ENTWFStateSelectCountByENTWFOwnerGroupIdResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountOfStates", DbType="Int")]
		public System.Nullable<int> CountOfStates
		{
			get
			{
				return this._CountOfStates;
			}
			set
			{
				if ((this._CountOfStates != value))
				{
					this._CountOfStates = value;
				}
			}
		}
	}
	
	public partial class PTOVacationBankIsDuplicateResult
	{
		
		private System.Nullable<int> _CountOfDuplicates;
		
		public PTOVacationBankIsDuplicateResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountOfDuplicates", DbType="Int")]
		public System.Nullable<int> CountOfDuplicates
		{
			get
			{
				return this._CountOfDuplicates;
			}
			set
			{
				if ((this._CountOfDuplicates != value))
				{
					this._CountOfDuplicates = value;
				}
			}
		}
	}
	
	public partial class PTOVacationBankSelectDistinctYearsResult
	{
		
		private short _VacationYear;
		
		public PTOVacationBankSelectDistinctYearsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VacationYear", DbType="SmallInt NOT NULL")]
		public short VacationYear
		{
			get
			{
				return this._VacationYear;
			}
			set
			{
				if ((this._VacationYear != value))
				{
					this._VacationYear = value;
				}
			}
		}
	}
	
	public partial class PTORequestSelectByENTUserAccountIdYearResult
	{
		
		private System.Nullable<int> _CountOfFullVacation;
		
		private System.Nullable<decimal> _CountOfHalfVacation;
		
		private System.Nullable<int> _CountOfFullPersonal;
		
		private System.Nullable<decimal> _CountOfHalfPersonal;
		
		private System.Nullable<int> _CountOfFullUnpaid;
		
		private System.Nullable<decimal> _CountOfHalfUnPaid;
		
		public PTORequestSelectByENTUserAccountIdYearResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountOfFullVacation", DbType="Int")]
		public System.Nullable<int> CountOfFullVacation
		{
			get
			{
				return this._CountOfFullVacation;
			}
			set
			{
				if ((this._CountOfFullVacation != value))
				{
					this._CountOfFullVacation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountOfHalfVacation", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> CountOfHalfVacation
		{
			get
			{
				return this._CountOfHalfVacation;
			}
			set
			{
				if ((this._CountOfHalfVacation != value))
				{
					this._CountOfHalfVacation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountOfFullPersonal", DbType="Int")]
		public System.Nullable<int> CountOfFullPersonal
		{
			get
			{
				return this._CountOfFullPersonal;
			}
			set
			{
				if ((this._CountOfFullPersonal != value))
				{
					this._CountOfFullPersonal = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountOfHalfPersonal", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> CountOfHalfPersonal
		{
			get
			{
				return this._CountOfHalfPersonal;
			}
			set
			{
				if ((this._CountOfHalfPersonal != value))
				{
					this._CountOfHalfPersonal = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountOfFullUnpaid", DbType="Int")]
		public System.Nullable<int> CountOfFullUnpaid
		{
			get
			{
				return this._CountOfFullUnpaid;
			}
			set
			{
				if ((this._CountOfFullUnpaid != value))
				{
					this._CountOfFullUnpaid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountOfHalfUnPaid", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> CountOfHalfUnPaid
		{
			get
			{
				return this._CountOfHalfUnPaid;
			}
			set
			{
				if ((this._CountOfHalfUnPaid != value))
				{
					this._CountOfHalfUnPaid = value;
				}
			}
		}
	}
	
	public partial class ENTWFItemOwnerSelectLastUserByGroupIdResult
	{
		
		private System.Nullable<int> _ENTUserAccountId;
		
		public ENTWFItemOwnerSelectLastUserByGroupIdResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTUserAccountId", DbType="Int")]
		public System.Nullable<int> ENTUserAccountId
		{
			get
			{
				return this._ENTUserAccountId;
			}
			set
			{
				if ((this._ENTUserAccountId != value))
				{
					this._ENTUserAccountId = value;
				}
			}
		}
	}
	
	public partial class ENTWFItemSelectByWorkflowIdResult
	{
		
		private int _CountOfWFItems;
		
		public ENTWFItemSelectByWorkflowIdResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountOfWFItems", DbType="Int NOT NULL")]
		public int CountOfWFItems
		{
			get
			{
				return this._CountOfWFItems;
			}
			set
			{
				if ((this._CountOfWFItems != value))
				{
					this._CountOfWFItems = value;
				}
			}
		}
	}
	
	public partial class ReportRoleCapabilityResult
	{
		
		private string _RoleName;
		
		private byte _AccessFlag;
		
		private string _CapabilityName;
		
		public ReportRoleCapabilityResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFlag", DbType="TinyInt NOT NULL")]
		public byte AccessFlag
		{
			get
			{
				return this._AccessFlag;
			}
			set
			{
				if ((this._AccessFlag != value))
				{
					this._AccessFlag = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapabilityName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CapabilityName
		{
			get
			{
				return this._CapabilityName;
			}
			set
			{
				if ((this._CapabilityName != value))
				{
					this._CapabilityName = value;
				}
			}
		}
	}
	
	public partial class ReportRoleUserAccountResult
	{
		
		private string _RoleName;
		
		private string _FirstName;
		
		private string _LastName;
		
		public ReportRoleUserAccountResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
	}
	
	public partial class ReportMyPTORequestsResult
	{
		
		private string _LastName;
		
		private string _FirstName;
		
		private System.DateTime _RequestDate;
		
		private string _PTODayTypeName;
		
		private string _PTORequestTypeName;
		
		private string _CurrentState;
		
		private string _CurrentOwnerLastName;
		
		private string _CurrentOwnerFirstName;
		
		public ReportMyPTORequestsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="DateTime NOT NULL")]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this._RequestDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTODayTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PTODayTypeName
		{
			get
			{
				return this._PTODayTypeName;
			}
			set
			{
				if ((this._PTODayTypeName != value))
				{
					this._PTODayTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTORequestTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PTORequestTypeName
		{
			get
			{
				return this._PTORequestTypeName;
			}
			set
			{
				if ((this._PTORequestTypeName != value))
				{
					this._PTORequestTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentState", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CurrentState
		{
			get
			{
				return this._CurrentState;
			}
			set
			{
				if ((this._CurrentState != value))
				{
					this._CurrentState = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentOwnerLastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CurrentOwnerLastName
		{
			get
			{
				return this._CurrentOwnerLastName;
			}
			set
			{
				if ((this._CurrentOwnerLastName != value))
				{
					this._CurrentOwnerLastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentOwnerFirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CurrentOwnerFirstName
		{
			get
			{
				return this._CurrentOwnerFirstName;
			}
			set
			{
				if ((this._CurrentOwnerFirstName != value))
				{
					this._CurrentOwnerFirstName = value;
				}
			}
		}
	}
	
	public partial class ReportAuditResult
	{
		
		private int _ENTAuditId;
		
		private string _ObjectName;
		
		private int _RecordId;
		
		private string _PropertyName;
		
		private string _OldValue;
		
		private string _NewValue;
		
		private byte _AuditType;
		
		private System.DateTime _InsertDate;
		
		private string _FirstName;
		
		private string _LastName;
		
		public ReportAuditResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTAuditId", DbType="Int NOT NULL")]
		public int ENTAuditId
		{
			get
			{
				return this._ENTAuditId;
			}
			set
			{
				if ((this._ENTAuditId != value))
				{
					this._ENTAuditId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string ObjectName
		{
			get
			{
				return this._ObjectName;
			}
			set
			{
				if ((this._ObjectName != value))
				{
					this._ObjectName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordId", DbType="Int NOT NULL")]
		public int RecordId
		{
			get
			{
				return this._RecordId;
			}
			set
			{
				if ((this._RecordId != value))
				{
					this._RecordId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyName", DbType="VarChar(255)")]
		public string PropertyName
		{
			get
			{
				return this._PropertyName;
			}
			set
			{
				if ((this._PropertyName != value))
				{
					this._PropertyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldValue", DbType="VarChar(MAX)")]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this._OldValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewValue", DbType="VarChar(MAX)")]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this._NewValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditType", DbType="TinyInt NOT NULL")]
		public byte AuditType
		{
			get
			{
				return this._AuditType;
			}
			set
			{
				if ((this._AuditType != value))
				{
					this._AuditType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="DateTime NOT NULL")]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this._InsertDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
